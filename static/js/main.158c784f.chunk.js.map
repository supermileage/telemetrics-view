{"version":3,"sources":["constants.js","index.js"],"names":["data","datasets","spanGaps","showLine","label","yAxisID","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","chartOptions","animation","duration","scales","xAxes","gridLines","display","type","distribution","scaleLabel","labelString","yAxes","id","position","request","state","current","query","filter","compositeFilter","filters","propertyFilter","op","property","name","value","stringValue","startTime","toISOString","kind","projection","endTime","shortcuts","Today","moment","Yesterday","subtract","GraphContainer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChangeStart","time","setState","handleChangeEnd","handleCurrent","e","target","checked","intervalHandler","clearTimeout","timeout","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","getData","console","log","setTimeout","stop","getDataHandler","_ref2","_callee2","req","_context2","lastCursor","startCursor","fetch","method","headers","Authorization","token","Accept","Content-Type","body","JSON","stringify","then","val","json","batch","vals","slice","entityResults","forEach","d","elem","y","parseFloat","entity","properties","x","published_at","length","unix","push","NaN","moreResults","endCursor","error","_x","apply","arguments","_callee3","newData","_context3","updating","toConsumableArray","graph","chartRef","_meta","hidden","responseGoogle","response","loggedIn","accessToken","responseFail","buttonProvider","react_default","createElement","className","onClick","disabled","infoHide","infoOn","getChartRef","ref","header","undefined","src_DayRange","startVal","endVal","onChangeStart","onChangeEnd","component_default","defaultChecked","onChange","src_Graph","google_login_default","clientId","buttonText","onSuccess","onFailure","React","Component","Graph","render","es","_this2","options","DayRange","rc_datetime_picker_cjs","format","readOnly","ReactDOM","src_GraphContainer","document","getElementById"],"mappings":"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","file":"static/js/main.158c784f.chunk.js","sourcesContent":["import moment from 'moment';\r\n\r\nexport const data = {\r\n    datasets: [\r\n        {\r\n            spanGaps: false,\r\n            showLine: true,\r\n            label: 'Velocity',\r\n            yAxisID: 'Velocity',\r\n            fill: true,\r\n            lineTension: 0.1,\r\n            backgroundColor: 'rgba(75,192,192,0.4)',\r\n            borderColor: 'rgba(75,192,192,1)',\r\n            borderCapStyle: 'butt',\r\n            borderDash: [],\r\n            borderDashOffset: 0.0,\r\n            borderJoinStyle: 'miter',\r\n            pointBorderColor: 'rgba(75,192,192,1)',\r\n            pointBackgroundColor: '#fff',\r\n            pointBorderWidth: 1,\r\n            pointHoverRadius: 5,\r\n            pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n            pointHoverBorderWidth: 2,\r\n            pointRadius: 1,\r\n            pointHitRadius: 10,\r\n            data: [] // Data to update\r\n        },\r\n        {\r\n            spanGaps: false,\r\n            showLine: true,\r\n            label: 'Power',\r\n            yAxisID: 'Power',\r\n            fill: true,\r\n            lineTension: 0.1,\r\n            backgroundColor: 'rgba(192,86,75,0.4)',\r\n            borderColor: 'rgba(192,86,75,1)',\r\n            borderCapStyle: 'butt',\r\n            borderDash: [],\r\n            borderDashOffset: 0.0,\r\n            borderJoinStyle: 'miter',\r\n            pointBorderColor: 'rgba(192,86,75,1)',\r\n            pointBackgroundColor: '#fff',\r\n            pointBorderWidth: 1,\r\n            pointHoverRadius: 5,\r\n            pointHoverBackgroundColor: 'rgba(192,86,75,1)',\r\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n            pointHoverBorderWidth: 2,\r\n            pointRadius: 1,\r\n            pointHitRadius: 10,\r\n            data: [] // Data to update\r\n        }\r\n    ],\r\n};\r\n\r\nexport const chartOptions = {\r\n    animation: {\r\n      duration : 500,\r\n    },\r\n    scales : {\r\n      xAxes: [{\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        type: 'time',\r\n        distribution: 'linear', // Distances can vary, based on time\r\n        scaleLabel: {\r\n          display: true,\r\n          labelString: 'Time'\r\n        },\r\n      }],\r\n      yAxes: [{\r\n        id: 'Velocity',\r\n        position: 'left',\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        scaleLabel: {\r\n          display: true,\r\n          labelString: 'Velocity'\r\n        },\r\n        },\r\n        {\r\n          id: 'Power',\r\n          position: 'right',\r\n          gridLines: {\r\n            display: false,\r\n          },\r\n          scaleLabel: {\r\n            display: true,\r\n            labelString: 'Power'\r\n          },\r\n        }\r\n    ]\r\n    },\r\n}\r\n  \r\nexport const request = (state, type) => {\r\nreturn (state.current) ? {\r\n    query: {\r\n        filter: {\r\n            compositeFilter: {\r\n                filters: [\r\n                {\r\n                    propertyFilter: {\r\n                        op: 'GREATER_THAN_OR_EQUAL',\r\n                        property: {\r\n                            name: 'published_at'\r\n                        },\r\n                        value: {\r\n                            stringValue: state.startTime.toISOString()\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    propertyFilter: {\r\n                        op: 'EQUAL',\r\n                        property: {\r\n                            name: 'event'\r\n                        },\r\n                        value: {\r\n                            stringValue: type\r\n                        }\r\n                    }\r\n                }\r\n                ],\r\n                op: \"AND\"\r\n            }\r\n        },\r\n        kind: [\r\n            {\r\n                name: 'ParticleEvent'\r\n            }\r\n        ],\r\n        projection: [\r\n            {\r\n                property: {\r\n                    name: 'data'\r\n                }\r\n            },\r\n            {\r\n                property: {\r\n                    name: 'published_at'\r\n                }\r\n            }\r\n        ],\r\n    }\r\n    } : {\r\n    query: {\r\n        filter: {\r\n            compositeFilter: {\r\n                filters: [\r\n                {\r\n                    propertyFilter: {\r\n                        op: 'GREATER_THAN_OR_EQUAL',\r\n                        property: {\r\n                            name: 'published_at'\r\n                        },\r\n                        value: {\r\n                            stringValue: state.startTime.toISOString()\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    propertyFilter: {\r\n                        op: 'LESS_THAN_OR_EQUAL',\r\n                        property: {\r\n                            name: 'published_at'\r\n                        },\r\n                        value: {\r\n                            stringValue: state.endTime.toISOString()\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    propertyFilter: {\r\n                        op: 'EQUAL',\r\n                        property: {\r\n                            name: 'event'\r\n                        },\r\n                        value: {\r\n                            stringValue: type\r\n                        }\r\n                    }\r\n                }\r\n                ],\r\n                op: \"AND\"\r\n            }\r\n        }\r\n        ,\r\n        kind: [\r\n        {\r\n            name: \"ParticleEvent\"\r\n        }\r\n        ],\r\n        projection: [\r\n        {\r\n            property: {\r\n            name: \"data\"\r\n            }\r\n        },\r\n        {\r\n            property: {\r\n            name: \"published_at\"\r\n            }\r\n        }\r\n        ]\r\n    }\r\n}\r\n};\r\n\r\nexport const shortcuts = {\r\n'Today': moment(),\r\n'Yesterday': moment().subtract(1, 'days'),\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Scatter} from 'react-chartjs-2';\r\nimport moment from 'moment';\r\nimport {DatetimePickerTrigger} from 'rc-datetime-picker';\r\nimport Toggle from 'react-toggle';\r\nimport GoogleLogin from 'react-google-login';\r\nimport {data, chartOptions, request, shortcuts} from './constants.js';\r\nimport './datetime.css';\r\nimport './toggle.css';\r\nimport './index.css';\r\nimport 'bulma/css/bulma.css';\r\n\r\n// Our graph container to hold all our objects, and also\r\n// to store state of our objects\r\nclass GraphContainer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.lastCursor = null;\r\n    this.vals = [];\r\n    this.chartRef = null;\r\n    this.state = {\r\n      startTime: moment(),\r\n      endTime: moment(),\r\n      current: false,\r\n      loggedIn: false,\r\n      graph: data,\r\n      updating: false,\r\n      infoOn: true\r\n    }\r\n  }\r\n\r\n  // Handle the start time change\r\n  handleChangeStart = (time) => {\r\n    this.setState({\r\n      startTime: time\r\n    })\r\n  }\r\n\r\n  // Handle the end time change\r\n  handleChangeEnd = (time) => {\r\n    this.setState({\r\n      endTime: time\r\n    })\r\n  }\r\n\r\n  // Handle the current boolean for \"live\" plotting\r\n  handleCurrent = (e) => {\r\n    let current = e.target.checked;\r\n    if (current) {\r\n      this.setState({\r\n        current: true,\r\n        endTime: null\r\n      })\r\n      this.intervalHandler();\r\n    } else {\r\n      clearTimeout(this.timeout);\r\n      this.setState({\r\n        current: false\r\n      })\r\n      this.handleChangeEnd(moment());\r\n    }\r\n  }\r\n\r\n  intervalHandler = async () => {\r\n    await this.getData();\r\n    console.log(\"get data done, resetting\");\r\n    if (this.state.current) {\r\n      this.timeout = setTimeout(this.intervalHandler, 2000);\r\n    }\r\n  }\r\n\r\n  // POST using OAuth creds to retrieve datastore based on time\r\n  // Async means it returns an implicit Promise that we will resolve later\r\n  getDataHandler = async (type) => {\r\n    // Build our query\r\n    let req = request(this.state, type);\r\n\r\n    // Change our lastCursor value\r\n    if (this.lastCursor !== null) req.query.startCursor = this.lastCursor;\r\n    // Call our fetch\r\n    await fetch('https://datastore.googleapis.com/v1/projects/ubc-supermileage-telemetry-v2:runQuery?prettyPrint=true&alt=json', \r\n      {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization' : 'Bearer ' + this.token,\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(req)}).then(val => val.json().then(e => {\r\n        // Try safety\r\n        console.log(e);\r\n        try {\r\n          if ('entityResults' in e.batch) {\r\n            console.log()\r\n            if (this.lastCursor === null) {\r\n              this.vals = [];\r\n            } else {\r\n              this.vals = this.vals.slice(); // Return a copy\r\n            }\r\n            e.batch.entityResults.forEach(d => {\r\n              let elem = {};\r\n              elem.y = parseFloat(d.entity.properties.data.stringValue);\r\n              elem.x = moment(d.entity.properties.published_at.stringValue);\r\n              // Check if the last element was greater than 10 minutes ago\r\n              if (this.vals.length > 0 && elem.x.unix() - moment(this.vals[this.vals.length - 1].x).unix() > 600) {\r\n                this.vals.push({\r\n                  y: NaN,\r\n                  x: elem.x\r\n                });\r\n              }\r\n              this.vals.push(elem);\r\n            });\r\n          } else {\r\n            // Clear our values\r\n            this.vals = [];\r\n          }\r\n          if (e.batch.moreResults === \"NOT_FINISHED\") {\r\n            console.log(\"Not done\");\r\n            this.lastCursor = e.batch.endCursor;\r\n            return this.getDataHandler(type);\r\n          }\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n        console.log(\"Done\");\r\n        this.lastCursor = null;\r\n        return true;\r\n      }));\r\n  }\r\n\r\n  // Handler for our data, which sets up a promise \r\n  // that updates once our data has been set up\r\n  getData = async () => {\r\n    this.setState({\r\n      updating: true // Set updating to true so we render notice\r\n    });\r\n    let newData = [\r\n      ...this.state.graph.datasets, // Spread operator allows us to copy things\r\n    ];\r\n    if (this.chartRef !== null && this.chartRef.props.data.datasets[0]._meta[0].hidden !== true) {\r\n      await this.getDataHandler('Velocity');\r\n      newData[0].data = this.vals;\r\n    }\r\n    if (this.chartRef !== null && this.chartRef.props.data.datasets[1]._meta[0].hidden !== true) {\r\n      await this.getDataHandler('Power');\r\n      newData[1].data = this.vals;\r\n    }\r\n    this.setState({\r\n      graph: {\r\n        datasets: newData\r\n      },\r\n      updating: false // done updating\r\n    });\r\n  }\r\n\r\n  // OAuth authorized, do stuff\r\n  responseGoogle = (response) => {\r\n    this.setState({\r\n      loggedIn: true\r\n    });\r\n    console.log(response);\r\n    console.log(\"Success\");\r\n    this.token = response.accessToken;\r\n  }\r\n\r\n  // OAuth failed, don't do stuff\r\n  responseFail = (response) => {\r\n    console.log(response);\r\n    console.log(\"Failed\");\r\n  }\r\n\r\n  // This code sucks\r\n  buttonProvider = () => {\r\n    return (this.state.current) ? (<button \r\n      className=\"button is-rounded is-info is-small is-loading\" \r\n      onClick={this.getData} \r\n      disabled\r\n    >Update</button>) : (this.state.updating) ? (<button \r\n      className=\"button is-rounded is-info is-small is-loading\" \r\n      onClick={this.getData}\r\n      disabled\r\n    >Update</button>) : (<button \r\n      className=\"button is-rounded is-info is-small\" \r\n      onClick={this.getData} \r\n    >Update</button>);\r\n  }\r\n\r\n  infoHide = () => {\r\n    this.setState({\r\n      infoOn: false\r\n    });\r\n  }\r\n\r\n  getChartRef = (ref) => {\r\n    // Get reference to the chart \r\n    if (this.chartRef === null && ref !== null) {\r\n      this.chartRef = ref;\r\n    }\r\n  }\r\n\r\n  // Render element based on logged in state\r\n  render() {\r\n    const header = (<div className=\"container\"><div className=\"notification is-info\">Welcome! If it's your first time here,\r\n    the toggle sets whether the data is updated live. Otherwise, you can grab specific data by selecting \r\n    your time range, then pressing \"Update\". You may encounter errors if you're not authorized to access the \r\n    datastore. You can close this message on the top right.\r\n    <button onClick={this.infoHide} className=\"delete\"></button>\r\n    </div></div>);\r\n    if (!this.state.loggedIn) {\r\n      return (<div>\r\n      <div className=\"container notification is-link floater\">To get started, log in to generate an OAuth token.</div>\r\n      <div className=\"login\">\r\n        <GoogleLogin\r\n          clientId = \"617338661646-v92ol8vhd4nl44vpntkv4jpjbq5hahmo.apps.googleusercontent.com\"\r\n          buttonText = \"Login\"\r\n          onSuccess = {this.responseGoogle}\r\n          onFailure = {this.responseFail} \r\n        /></div></div>);\r\n    } else {\r\n      return (<div>\r\n      {(this.state.infoOn) ? header : undefined}\r\n      <div className=\"container notification\">\r\n        <div className=\"columns\">\r\n          <div className=\"column is-narrow\">\r\n            <DayRange\r\n              startVal = {this.state.startTime}\r\n              endVal = {this.state.endTime}\r\n              onChangeStart = {this.handleChangeStart}\r\n              onChangeEnd = {this.handleChangeEnd}\r\n            />\r\n          </div>\r\n          <div className=\"column\">\r\n            <div className=\"columns is-mobile\">\r\n              <div className=\"toggle column is-narrow\">\r\n                <Toggle\r\n                  defaultChecked = {this.state.current}\r\n                  onChange = {this.handleCurrent}\r\n                />\r\n              </div>\r\n              <div className=\"column is-narrow\">\r\n                {this.buttonProvider()}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"container notification has-background-white-bis\">\r\n        <Graph\r\n          data={this.state.graph}\r\n          chartRef={this.getChartRef}\r\n        />\r\n      </div>\r\n      </div>);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Component that holds our graph object. \r\n */\r\nclass Graph extends React.Component {\r\n  render = () => {\r\n    return (<div>\r\n      <Scatter \r\n        data={this.props.data}\r\n        options={chartOptions}\r\n        ref={ref => this.props.chartRef(ref)}\r\n      />\r\n    </div>);\r\n  }\r\n}\r\n\r\n\r\nclass DayRange extends React.Component {\r\n  // Render my pickers; all the state is lifted up into \r\n  // the parent element, thus all the changes are handled\r\n  // by props; this element does not have state\r\n  render() {\r\n    return (<div className=\"columns\">\r\n        <div className=\"column\">\r\n          <DatetimePickerTrigger\r\n            className = \"input is-rounded is-small\"\r\n            shortcuts = {shortcuts}\r\n            moment = {this.props.startVal}\r\n            onChange = {this.props.onChangeStart}>\r\n            <input type=\"text\" value={this.props.startVal.format('YYYY-MM-DD HH:mm')} readOnly />\r\n          </DatetimePickerTrigger>\r\n          </div>\r\n        <div className=\"column\">\r\n          <DatetimePickerTrigger\r\n            className = \"input is-rounded is-small\"\r\n            shortcuts = {shortcuts}\r\n            moment = {this.props.endVal}\r\n            onChange = {this.props.onChangeEnd}\r\n            disabled = {(this.props.endVal === null) ? true : false}>\r\n            <input \r\n              type = \"text\" \r\n              value = {(this.props.endVal === null) ?\r\n                \"Current\" : this.props.endVal.format('YYYY-MM-DD HH:mm')} \r\n              readOnly\r\n              disabled = {(this.props.endVal === null) ? true : false}\r\n            />\r\n          </DatetimePickerTrigger>\r\n        </div>\r\n      </div>);\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <GraphContainer />,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}