{"version":3,"sources":["index.js"],"names":["data","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","parseDate","d","Date","getFullYear","getMonth","toString","padStart","getDate","getHours","getMinutes","getSeconds","getMilliseconds","GraphContainer","props","_this","Object","C_Users_lesli_Desktop_react_exploration_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","C_Users_lesli_Desktop_react_exploration_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","C_Users_lesli_Desktop_react_exploration_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","handleChangeStart","time","setState","startTime","handleChangeEnd","endTime","handleCurrent","e","target","checked","current","interval","setInterval","getData","clearInterval","fetch","method","headers","Authorization","token","Accept","Content-Type","body","JSON","stringify","gqlQuery","queryString","state","allowLiterals","then","val","json","console","log","batch","entityResults","responseGoogle","response","loggedIn","accessToken","responseFail","buttonInit","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","className","onClick","animations","DayRange","startVal","endVal","onChangeStart","onChangeEnd","isCurrent","isCurrentHandler","Graph","react_google_login__WEBPACK_IMPORTED_MODULE_11___default","clientId","buttonText","onSuccess","onFailure","React","Component","_this2","render","react_chartjs_2__WEBPACK_IMPORTED_MODULE_8__","options","animation","duration","_this3","newLabels","length","slice","oldData","newData","C_Users_lesli_Desktop_react_exploration_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","push","Math","random","id","react_datepicker__WEBPACK_IMPORTED_MODULE_9__","selected","selectsStart","showTimeSelect","timeIntervals","startDate","endDate","onChange","dateFormat","placeholderText","selectsEnd","react_toggle__WEBPACK_IMPORTED_MODULE_10___default","defaultChecked","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.109337c0.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Line} from 'react-chartjs-2';\r\nimport DatePicker from 'react-datepicker';\r\nimport Toggle from 'react-toggle';\r\nimport GoogleLogin from 'react-google-login';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport \"./toggle.css\";\r\nimport './index.css';\r\n\r\n\r\nconst data = {\r\n  labels: [], // Labels to update\r\n  datasets: [\r\n    {\r\n      label: 'Test',\r\n      fill: true,\r\n      lineTension: 0.1,\r\n      backgroundColor: 'rgba(75,192,192,0.4)',\r\n      borderColor: 'rgba(75,192,192,1)',\r\n      borderCapStyle: 'butt',\r\n      borderDash: [],\r\n      borderDashOffset: 0.0,\r\n      borderJoinStyle: 'miter',\r\n      pointBorderColor: 'rgba(75,192,192,1)',\r\n      pointBackgroundColor: '#fff',\r\n      pointBorderWidth: 1,\r\n      pointHoverRadius: 5,\r\n      pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n      pointHoverBorderWidth: 2,\r\n      pointRadius: 1,\r\n      pointHitRadius: 10,\r\n      data: [] // Data to update\r\n    }\r\n  ]\r\n};\r\n\r\n// Parse a date object into the format we need for the datastore\r\nconst parseDate = (d) => {\r\n  if (d == null) return parseDate(new Date())\r\n  return d.getFullYear() + \"-\" \r\n        + (d.getMonth() + 1).toString().padStart(2, '0') + \"-\"\r\n        + d.getDate().toString().padStart(2, '0') + \"T\" \r\n        + d.getHours().toString().padStart(2, '0') + \":\" \r\n        + d.getMinutes().toString().padStart(2, '0') + \":\" \r\n        + d.getSeconds().toString().padStart(2, '0') + \".\" \r\n        + d.getMilliseconds().toString().padStart(3, '0') + \"Z\";\r\n}\r\n\r\n// Our graph container to hold all our objects, and also\r\n// to store state of our objects\r\nclass GraphContainer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      startTime: new Date(),\r\n      endTime: new Date(),\r\n      current: false,\r\n      loggedIn: false,\r\n      animations: true\r\n    }\r\n  }\r\n\r\n  // Handle the start time change\r\n  handleChangeStart = (time) => {\r\n    this.setState({\r\n      startTime: time\r\n    })\r\n  }\r\n\r\n  // Handle the end time change\r\n  handleChangeEnd = (time) => {\r\n    this.setState({\r\n      endTime: time\r\n    })\r\n  }\r\n\r\n  // Handle the current boolean for \"live\" plotting\r\n  handleCurrent = (e) => {\r\n    let current = e.target.checked;\r\n    if (current) {\r\n      this.setState({\r\n        current: true,\r\n        endTime: null\r\n      })\r\n      this.interval = setInterval(() => this.getData(), 1500);\r\n    } else {\r\n      this.setState({\r\n        current: false\r\n      })\r\n      clearInterval(this.interval);\r\n      this.handleChangeEnd(new Date());\r\n    }\r\n  }\r\n\r\n  // POST using OAuth creds to retrieve datastore based on time\r\n  getData = () => {\r\n    fetch('https://datastore.googleapis.com/v1/projects/ubc-supermileage-telemetry-v2:runQuery?prettyPrint=true&alt=json', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization' : 'Bearer ' + this.token,\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        gqlQuery: {\r\n          queryString: \"SELECT * FROM ParticleEvent WHERE ParticleEvent.published_at >= '\" \r\n          + parseDate(this.state.startTime) + ((this.state.current) ? \"'\" : (\"' AND ParticleEvent.published_at <= '\"\r\n          + parseDate(this.state.endTime) + \"'\")),\r\n          allowLiterals: true\r\n        }\r\n      })\r\n  }).then(val => val.json().then(e => {\r\n    console.log(e.batch.entityResults);\r\n    console.log(e);\r\n  }));\r\n  }\r\n\r\n  // OAuth authorized, do stuff\r\n  responseGoogle = (response) => {\r\n    this.setState({\r\n      loggedIn: true\r\n    });\r\n    console.log(response);\r\n    this.token = response.accessToken;\r\n  }\r\n\r\n  // OAuth failed, don't do stuff\r\n  responseFail = (response) => {\r\n    console.log(response);\r\n    console.log(\"Failed\");\r\n  }\r\n\r\n  buttonInit = () => {\r\n      return (<span className=\"updateButton\">\r\n        <button onClick={this.getData}>Update</button>\r\n      </span>);\r\n  }\r\n\r\n  // Render element based on logged in state\r\n  render() {\r\n    if (!this.state.loggedIn) {\r\n      return (<div className=\"login\">\r\n        <GoogleLogin\r\n          clientId = \"617338661646-v92ol8vhd4nl44vpntkv4jpjbq5hahmo.apps.googleusercontent.com\"\r\n          buttonText = \"Login\"\r\n          onSuccess = {this.responseGoogle}\r\n          onFailure = {this.responseFail} \r\n        /></div>);\r\n    } else {\r\n      console.log(\"rerendering\");\r\n      return (<div><div className=\"header\">\r\n        <DayRange \r\n        startVal = {this.state.startTime}\r\n        endVal = {this.state.endTime}\r\n        onChangeStart = {this.handleChangeStart}\r\n        onChangeEnd = {this.handleChangeEnd}\r\n        isCurrent = {this.state.current}\r\n        isCurrentHandler = {this.handleCurrent}\r\n      />\r\n      {\r\n        (this.state.current) ? \r\n        \"\" : this.buttonInit()\r\n      }\r\n      </div>\r\n      <Graph \r\n        animations = {this.state.animations}\r\n      /></div>);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Component that holds our graph object. \r\n */\r\nclass Graph extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.val = 1;\r\n    this.state = data;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.interval = setInterval(() => {\r\n      let newLabels = (this.state.labels.length > 10) ?\r\n            this.state.labels.slice() : this.state.labels.slice();\r\n      let oldData = this.state.datasets[0];\r\n      var newData = {\r\n        ...oldData\r\n      };\r\n      newData.data = (oldData.data.length > 10) ? \r\n              oldData.data.slice() : oldData.data.slice();\r\n      newLabels.push(this.val);\r\n      this.val++;\r\n      newData.data.push(Math.random());\r\n      this.setState({\r\n        labels: newLabels,\r\n        datasets: [newData]\r\n      });\r\n    }, 2000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n  \r\n  render = () => {\r\n    return (<div>\r\n      <Line \r\n        data = {this.state}\r\n        options={{\r\n          animation: (this.props.animations) ? {\r\n            duration : 500,\r\n          } : false\r\n        }}\r\n      />\r\n    </div>);\r\n  }\r\n}\r\n\r\n\r\nclass DayRange extends React.Component {\r\n  // Render my pickers; all the state is lifted up into \r\n  // the parent element, thus all the changes are handled\r\n  // by props; this element does not have state\r\n  render() {\r\n    return (<div id=\"pickers\">{\" Start \"} <DatePicker\r\n        selected={this.props.startVal}\r\n        selectsStart\r\n        showTimeSelect\r\n        timeIntervals={15}\r\n        startDate={this.props.startVal}\r\n        endDate={this.props.endVal}\r\n        onChange={this.props.onChangeStart}\r\n        dateFormat=\"MMMM d h:mm:ss aa\"\r\n        />\r\n        {\" End \"} \r\n        <DatePicker \r\n        selected={this.props.endVal}\r\n        placeholderText=\"Current\"\r\n        selectsEnd\r\n        showTimeSelect\r\n        timeIntervals={15}\r\n        startDate={this.props.startVal}\r\n        endDate={this.props.endVal}\r\n        onChange={this.props.onChangeEnd}\r\n        dateFormat=\"MMMM d h:mm:ss aa\"\r\n        >\r\n        <div>\r\n          <label>\r\n          <Toggle \r\n            defaultChecked={this.props.isCurrent}\r\n            onChange={this.props.isCurrentHandler}\r\n          />\r\n           <span>Get current values</span>\r\n          </label>\r\n        </div>\r\n        </DatePicker></div>);\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <GraphContainer />,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}