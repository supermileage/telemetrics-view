{"version":3,"sources":["helpers/builders.js","components/Graph.js","config/datasets/Urban/Temperature.js","config/datasets/Urban/Power.js","components/MapContainer.js","config/config.js","config/datasets.js","config/datasets/Urban/Location.js","config/datasets/Proto/Speed.js","config/datasets/Proto/Location.js","components/CustomButton.js","components/DayRange.js","components/AppContainer.js","App.js","index.js"],"names":["chartBuilder","color","label","id","data","datasets","spanGaps","showLine","yAxisID","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","Graph","render","props","options","React","PureComponent","handler","retval","d","retVals","entity","properties","stringValue","split","elem","y","parseFloat","x","moment","recorded_at","length","unix","push","NaN","parser","this","element","key","animation","duration","scales","xAxes","gridLines","display","type","distribution","scaleLabel","labelString","yAxes","position","MapContainer","clearFeature","feature","features","getSource","getFeatures","forEach","feat","removeFeature","formatCoordinate","coord","proj","lng","lat","componentDidMount","window","addEventListener","resizeListener","setState","height","document","getElementById","clientWidth","map","ol","view","center","config","defaults","zoom","layers","layer","source","controls","control","extend","target","loaded","bootstrapOverlay","componentWillUnmount","removeEventListener","overlay","autoPan","autoPanAnimation","state","addOverlay","on","e","hasFeatureAtPixel","pixel","getFeaturesAtPixel","get","innerHTML","format","setPosition","coordinate","undefined","centerMap","getView","setCenter","drawLineOnMap","lines","geometry","geom","name","setStyle","style","stroke","width","addLayer","drawMarkersOnMap","markers","timestamp","border","borderRadius","datastore","projectId","getQueryUrl","generatePayload","token","body","method","headers","Authorization","Accept","Urban","UrbanTemperature","UrbanPower","NMEASeq","parseInt","Proto","indexOf","oauth","clientId","refreshInterval","CustomButton","Button","variant","disabled","updating","liveMode","onClick","getDataHandler","DayRange","utils","MomentUtils","Grid","container","spacing","alignItems","justify","item","xs","sm","DateTimePicker","fullWidth","onChange","onChangeStart","value","startTime","onChangeEnd","endTime","emptyLabel","sizingIcons","1","2","3","4","AppContainer","startTimeChangeHandler","time","endTimeChangeHandler","changeSizing","max","Math","Object","keys","sizing","liveUpdateHandler","checked","intervalHandler","clearTimeout","timeout","a","updateMetrics","setTimeout","lastCursor","datasetId","req","query","filter","compositeFilter","filters","propertyFilter","op","property","toISOString","kind","projection","startCursor","fetch","JSON","stringify","response","json","batch","entityResults","moreResults","endCursor","console","log","getData","newData","car","dataset","includes","changeCar","populateCars","ret","MenuItem","modifyDatasets","slice","getCarProperties","FormControlLabel","Checkbox","Typography","classes","Container","className","ExpansionPanel","ExpansionPanelSummary","expandIcon","FormControl","stopPropagation","onFocus","InputLabel","Select","select","Tooltip","title","Switch","IconButton","ExpansionPanelDetails","index","Paper","dropdownOpen","withStyles","theme","minWidth","padding","App","oauthSuccess","loggedOn","accessToken","oauthFailure","CssBaseline","maxWidth","root","scope","buttonText","onSuccess","onFailure","paddingTop","ReactDOM"],"mappings":"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","file":"static/js/main.6c786aea.chunk.js","sourcesContent":["export const chartBuilder = (color, label, id, data) => {\n  return {\n    datasets: [\n      {\n        spanGaps: false,\n        showLine: true,\n        label: label,\n        yAxisID: id,\n        fill: true,\n        lineTension: 0.1,\n        backgroundColor: color,\n        borderColor: color,\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: color,\n        pointBackgroundColor: color,\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: color,\n        pointHoverBorderColor: color,\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: data\n      }\n    ]\n  };\n};\n\nexport const queryBuilder = (liveMode, startTime, endTime, id) => {\n  return liveMode\n    ? {\n        query: {\n          filter: {\n            compositeFilter: {\n              filters: [\n                {\n                  propertyFilter: {\n                    op: \"GREATER_THAN_OR_EQUAL\",\n                    property: {\n                      name: \"recorded_at\"\n                    },\n                    value: {\n                      stringValue: startTime.toISOString()\n                    }\n                  }\n                },\n                {\n                  propertyFilter: {\n                    op: \"EQUAL\",\n                    property: {\n                      name: \"event\"\n                    },\n                    value: {\n                      stringValue: id\n                    }\n                  }\n                }\n              ],\n              op: \"AND\"\n            }\n          },\n          kind: [\n            {\n              name: \"ParticleEvent\"\n            }\n          ],\n          projection: [\n            {\n              property: {\n                name: \"data\"\n              }\n            },\n            {\n              property: {\n                name: \"recorded_at\"\n              }\n            }\n          ]\n        }\n      }\n    : {\n        query: {\n          filter: {\n            compositeFilter: {\n              filters: [\n                {\n                  propertyFilter: {\n                    op: \"GREATER_THAN_OR_EQUAL\",\n                    property: {\n                      name: \"recorded_at\"\n                    },\n                    value: {\n                      stringValue: startTime.toISOString()\n                    }\n                  }\n                },\n                {\n                  propertyFilter: {\n                    op: \"LESS_THAN_OR_EQUAL\",\n                    property: {\n                      name: \"recorded_at\"\n                    },\n                    value: {\n                      stringValue: endTime.toISOString()\n                    }\n                  }\n                },\n                {\n                  propertyFilter: {\n                    op: \"EQUAL\",\n                    property: {\n                      name: \"event\"\n                    },\n                    value: {\n                      stringValue: id\n                    }\n                  }\n                }\n              ],\n              op: \"AND\"\n            }\n          },\n          kind: [\n            {\n              name: \"ParticleEvent\"\n            }\n          ],\n          projection: [\n            {\n              property: {\n                name: \"data\"\n              }\n            },\n            {\n              property: {\n                name: \"recorded_at\"\n              }\n            }\n          ]\n        }\n      };\n};\n","import { Scatter } from \"react-chartjs-2\";\nimport React from \"react\";\n\n/**\n * Component that holds our graph object.\n */\nexport default class Graph extends React.PureComponent {\n  render = () => {\n    return <Scatter data={this.props.data} options={this.props.options} />;\n  };\n}\n","import moment from \"moment\";\nimport { chartBuilder } from \"../../../helpers/builders.js\";\nimport React from \"react\";\nimport Graph from \"../../../components/Graph.js\";\n\nexport default {\n  label: \"Temperature\",\n  id: \"URBAN-Temperature\",\n  handler: function(retval, d) {\n    let retVals = d.entity.properties.data.stringValue.split(\" \");\n    let elem = {};\n    elem.y = parseFloat(retVals[0]);\n    elem.x = moment(d.entity.properties.recorded_at.stringValue);\n\n    // Check if the last element was greater than 10 minutes ago, we disjoint it then\n    if (\n      retval.length > 0 &&\n      elem.x.unix() - moment(retval[retval.length - 1].x).unix() > 600\n    ) {\n      retval.push({\n        y: NaN,\n        x: elem.x\n      });\n    }\n    retval.push(elem);\n  },\n  parser: function(data) {\n    return chartBuilder(\"#dcedc8\", this.label, this.id, data);\n  },\n  element: function(data) {\n    return <Graph key={this.id} data={data || {}} options={this.options} />;\n  },\n  options: {\n    animation: {\n      duration: 500\n    },\n    scales: {\n      xAxes: [\n        {\n          gridLines: {\n            display: true\n          },\n          type: \"time\",\n          distribution: \"linear\", // Distances can vary, based on time\n          scaleLabel: {\n            display: true,\n            labelString: \"Time\"\n          }\n        }\n      ],\n      yAxes: [\n        {\n          id: \"Temperature\",\n          position: \"left\",\n          gridLines: {\n            display: true\n          },\n          scaleLabel: {\n            display: true,\n            labelString: \"Temperature (C)\"\n          }\n        }\n      ]\n    }\n  }\n};\n","import moment from \"moment\";\nimport { chartBuilder } from \"../../../helpers/builders.js\";\nimport React from \"react\";\nimport Graph from \"../../../components/Graph.js\";\n\nexport default {\n  label: \"Power\",\n  id: \"URBAN-Power\",\n  handler: function(retval, d) {\n    let elem = {};\n    elem.y = parseFloat(d.entity.properties.data.stringValue);\n    elem.x = moment(d.entity.properties.recorded_at.stringValue);\n\n    // Check if the last element was greater than 10 minutes ago, we disjoint it then\n    if (\n      retval.length > 0 &&\n      elem.x.unix() - moment(retval[retval.length - 1].x).unix() > 600\n    ) {\n      retval.push({\n        y: NaN,\n        x: elem.x\n      });\n    }\n    retval.push(elem);\n  },\n  parser: function(data) {\n    return chartBuilder(\"#80deea\", this.label, this.id, data);\n  },\n  element: function(data) {\n    return <Graph key={this.id} data={data || {}} options={this.options} />;\n  },\n  options: {\n    animation: {\n      duration: 500\n    },\n    scales: {\n      xAxes: [\n        {\n          gridLines: {\n            display: true\n          },\n          type: \"time\",\n          distribution: \"linear\", // Distances can vary, based on time\n          scaleLabel: {\n            display: true,\n            labelString: \"Time\"\n          }\n        }\n      ],\n      yAxes: [\n        {\n          id: \"Power\",\n          position: \"left\",\n          gridLines: {\n            display: true\n          },\n          scaleLabel: {\n            display: true,\n            labelString: \"State of Charge (%)\"\n          }\n        }\n      ]\n    }\n  }\n};\n","import React from \"react\";\nimport config from \"../config/config.js\";\nimport moment from \"moment\";\n\nimport \"ol/ol.css\";\nimport * as ol from \"ol\";\nimport * as layer from \"ol/layer\";\nimport * as proj from \"ol/proj\";\nimport * as geom from \"ol/geom\";\nimport * as style from \"ol/style\";\nimport * as source from \"ol/source\";\nimport * as control from \"ol/control\";\n\n/**\n * Component that holds our map.\n */\nexport default class MapContainer extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.features = {};\n    this.state = {\n      map: null,\n      loaded: false,\n      height: 0\n    };\n  }\n\n  clearFeature = feature => {\n    if (this.features[feature]) {\n      this.features[feature]\n        .getSource()\n        .getFeatures()\n        .forEach(feat =>\n          this.features[feature].getSource().removeFeature(feat)\n        );\n    }\n  };\n\n  formatCoordinate = coord => {\n    return proj.fromLonLat([coord.lng, coord.lat]);\n  };\n\n  componentDidMount = () => {\n    window.addEventListener(\"resize\", this.resizeListener);\n    this.setState(\n      {\n        height: document.getElementById(\"map\").clientWidth * 0.5\n      },\n      () => {\n        let map = new ol.Map({\n          view: new ol.View({\n            center: this.formatCoordinate(config.map.defaults.center),\n            zoom: config.map.defaults.zoom\n          }),\n          layers: [\n            new layer.Tile({\n              source: new source.OSM()\n            })\n          ],\n          controls: control\n            .defaults()\n            .extend([new control.FullScreen(), new control.ScaleLine()]),\n          target: \"map\"\n        });\n\n        this.setState(\n          {\n            map: map,\n            loaded: true\n          },\n          this.bootstrapOverlay\n        );\n      }\n    );\n  };\n\n  resizeListener = () => {\n    this.setState({\n      height: document.getElementById(\"map\").clientWidth * 0.5\n    });\n  };\n\n  componentWillUnmount = () => {\n    window.removeEventListener(\"resize\", this.resizeListener);\n    this.features = {};\n    this.setState({\n      map: null,\n      loaded: false,\n      height: 0\n    });\n  };\n\n  bootstrapOverlay = () => {\n    this.features.overlay = new ol.Overlay({\n      element: document.getElementById(\"popup\"),\n      autoPan: true,\n      autoPanAnimation: {\n        duration: 250\n      }\n    });\n    this.state.map.addOverlay(this.features.overlay);\n\n    this.state.map.on(\"pointermove\", e => {\n      if (this.state.map.hasFeatureAtPixel(e.pixel) === true) {\n        let features = this.state.map.getFeaturesAtPixel(e.pixel);\n        if (features.length < 5) {\n          features.forEach(feature => {\n            if (feature.get(\"name\") === \"point\") {\n              document.getElementById(\"popup-content\").innerHTML = `<b>${moment(\n                feature.get(\"timestamp\")\n              ).format(\"HH:mm:ss A\")}</b>`;\n              this.features.overlay.setPosition(e.coordinate);\n            }\n          });\n        }\n      } else {\n        this.features.overlay.setPosition(undefined);\n      }\n    });\n  };\n\n  centerMap = () => {\n    if (this.props.data && this.props.data.length > 0) {\n      this.state.map\n        .getView()\n        .setCenter(\n          this.formatCoordinate(this.props.data[this.props.data.length - 1])\n        );\n    }\n  };\n\n  drawLineOnMap = () => {\n    if (this.props.data && this.props.data.length > 0) {\n      if (this.features.lines) {\n        this.clearFeature(\"lines\");\n      }\n      let feature = new ol.Feature({\n        geometry: new geom.LineString(\n          this.props.data.map(e => this.formatCoordinate(e))\n        ),\n        name: \"lines\"\n      });\n      this.features.lines = new layer.Vector({\n        source: new source.Vector({\n          features: [feature]\n        })\n      });\n      feature.setStyle(\n        new style.Style({ stroke: new style.Stroke({ width: 4 }) })\n      );\n      this.state.map.addLayer(this.features.lines);\n    } else {\n      // Clear the map property from the line\n      this.clearFeature(\"lines\");\n    }\n  };\n\n  drawMarkersOnMap = () => {\n    if (this.props.data && this.props.data.length > 0) {\n      if (this.features.markers) {\n        this.clearFeature(\"markers\");\n      }\n      let features = [];\n      this.props.data.forEach(e => {\n        features.push(\n          new ol.Feature({\n            geometry: new geom.Point(this.formatCoordinate(e)),\n            name: \"point\",\n            timestamp: e.timestamp\n          })\n        );\n      });\n\n      this.features.markers = new layer.Vector({\n        source: new source.Vector({\n          features\n        })\n      });\n\n      this.state.map.addLayer(this.features.markers);\n    } else {\n      this.clearFeature(\"markers\");\n    }\n  };\n\n  render = () => {\n    if (this.state.loaded) {\n      this.drawLineOnMap();\n      this.drawMarkersOnMap();\n      this.centerMap();\n    }\n    return (\n      <div id=\"map\" style={{ height: this.state.height }}>\n        <div\n          id=\"popup\"\n          style={{\n            backgroundColor: \"white\",\n            border: \"1px solid white\",\n            borderRadius: \"8px\"\n          }}\n        >\n          <div id=\"popup-content\"></div>\n        </div>\n      </div>\n    );\n  };\n}\n","import datasets from \"./datasets.js\";\n\nlet config = {\n  datastore: {\n    // https://cloud.google.com/datastore/docs/reference/data/rest/v1/projects/runQuery\n    projectId: \"supermileage-telemetry-266511\",\n    getQueryUrl: function() {\n      return (\n        \"https://datastore.googleapis.com/v1/projects/\" +\n        this.projectId +\n        \":runQuery?alt=json\"\n      );\n    },\n    generatePayload: (token, body) => {\n      return {\n        method: \"POST\",\n        headers: {\n          Authorization: \"Bearer \" + token,\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: body\n      };\n    },\n    datasets: datasets\n  },\n  oauth: {\n    clientId:\n      \"929098184548-qq0n3oj40b7s2qbk8nmjm9cn5c6bs15l.apps.googleusercontent.com\"\n  },\n  map: {\n    defaults: {\n      // Vancouver\n      center: { lat: 49.267941, lng: -123.24736 },\n      zoom: 12\n    }\n  },\n  refreshInterval: 5000\n};\n\nexport default config;","import UrbanTemperature from \"./datasets/Urban/Temperature.js\";\nimport UrbanPower from \"./datasets/Urban/Power.js\";\nimport UrbanLocation from \"./datasets/Urban/Location.js\";\n\nimport ProtoSpeed from \"./datasets/Proto/Speed.js\";\nimport ProtoLocation from \"./datasets/Proto/Location.js\";\n\nlet datasets = {\n  Urban: [\n    UrbanTemperature,\n    UrbanPower,\n    UrbanLocation\n  ],\n  Proto: [\n    ProtoSpeed,\n    ProtoLocation\n  ]\n};\n\nexport default datasets;\n","import React from \"react\";\nimport MapContainer from \"../../../components/MapContainer.js\";\n\nexport default {\n  label: \"Location\",\n  id: \"URBAN-Location\",\n  handler: function(retval, d) {\n    let NMEASeq = d.entity.properties.data.stringValue.split(\",\");\n    let lat =\n      parseInt(parseInt(NMEASeq[3]) / 100) +\n      parseFloat(parseFloat(NMEASeq[3]) % 100) / 60;\n    let lng =\n      parseInt(parseInt(NMEASeq[5]) / 100) +\n      parseFloat(parseFloat(NMEASeq[5]) % 100) / 60;\n    lat = NMEASeq[4] === \"S\" ? -lat : lat;\n    lng = NMEASeq[6] === \"W\" ? -lng : lng;\n    let timestamp = d.entity.properties.recorded_at.stringValue;\n    let elem = { lat, lng, timestamp };\n    retval.push(elem);\n  },\n  parser: function(data) {\n    return data;\n  },\n  element: function(data) {\n    return <MapContainer key={this.id} data={data || []} />;\n  }\n};\n","import moment from \"moment\";\nimport { chartBuilder } from \"../../../helpers/builders.js\";\nimport React from \"react\";\nimport Graph from \"../../../components/Graph.js\";\n\nexport default {\n  label: \"Speed\",\n  id: \"PROTO-Speed\",\n  handler: function(retval, d) {\n    let data = d.entity.properties.data.stringValue.split(\",\");\n\n    let elem = {};\n    elem.y = parseFloat(data[data.indexOf(\"K\") - 1]);\n    elem.x = moment(d.entity.properties.recorded_at.stringValue);\n\n    // Check if the last element was greater than 10 minutes ago, we disjoint it then\n    if (\n      retval.length > 0 &&\n      elem.x.unix() - moment(retval[retval.length - 1].x).unix() > 600\n    ) {\n      retval.push({\n        y: NaN,\n        x: elem.x\n      });\n    }\n    retval.push(elem);\n  },\n  parser: function(data) {\n    return chartBuilder(\"#8c9eff\", this.label, this.id, data);\n  },\n  element: function(data) {\n    return <Graph key={this.id} data={data || {}} options={this.options} />;\n  },\n  options: {\n    animation: {\n      duration: 500\n    },\n    scales: {\n      xAxes: [\n        {\n          gridLines: {\n            display: true\n          },\n          type: \"time\",\n          distribution: \"linear\", // Distances can vary, based on time\n          scaleLabel: {\n            display: true,\n            labelString: \"Time\"\n          }\n        }\n      ],\n      yAxes: [\n        {\n          id: \"PROTO-Speed\",\n          position: \"left\",\n          gridLines: {\n            display: true\n          },\n          scaleLabel: {\n            display: true,\n            labelString: \"km/h\"\n          }\n        }\n      ]\n    }\n  }\n};\n","import React from \"react\";\nimport MapContainer from \"../../../components/MapContainer.js\";\n\nexport default {\n  label: \"Location\",\n  id: \"PROTO-Location\",\n  handler: function(retval, d) {\n    let NMEASeq = d.entity.properties.data.stringValue.split(\",\");\n    let lat =\n      parseInt(parseInt(NMEASeq[3]) / 100) +\n      parseFloat(parseFloat(NMEASeq[3]) % 100) / 60;\n    let lng =\n      parseInt(parseInt(NMEASeq[5]) / 100) +\n      parseFloat(parseFloat(NMEASeq[5]) % 100) / 60;\n    lat = NMEASeq[4] === \"S\" ? -lat : lat;\n    lng = NMEASeq[6] === \"W\" ? -lng : lng;\n    let timestamp = d.entity.properties.recorded_at.stringValue;\n    let elem = { lat, lng, timestamp };\n    retval.push(elem);\n  },\n  parser: function(data) {\n    return data;\n  },\n  element: function(data) {\n    return <MapContainer key={this.id} data={data || []} />;\n  }\n};\n","import React from \"react\";\nimport { Button } from \"@material-ui/core\";\n\nexport default class CustomButton extends React.PureComponent {\n  render = () => {\n    return (\n      <Button\n        style={{ width: 80 }}\n        variant=\"contained\"\n        color=\"primary\"\n        disabled={this.props.updating || this.props.liveMode}\n        onClick={this.props.getDataHandler}\n      >\n        {this.props.liveMode ? \"Live\" : \"Update\"}\n      </Button>\n    );\n  };\n}\n","import React from \"react\";\nimport { DateTimePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport { Grid } from \"@material-ui/core\";\nimport MomentUtils from \"@date-io/moment\";\n\nexport default class DayRange extends React.PureComponent {\n  // Render my pickers; all the state is lifted up into\n  // the parent element, thus all the changes are handled\n  // by props; this element does not have state\n  render = () => {\n    return (\n      <MuiPickersUtilsProvider utils={MomentUtils}>\n        <Grid container spacing={2} alignItems=\"center\" justify=\"center\">\n          <Grid item xs={12} sm={6}>\n            <DateTimePicker\n              fullWidth\n              label=\"Start time\"\n              format=\"MMM D, hh:mm a\"\n              onChange={this.props.onChangeStart}\n              value={this.props.startTime}\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <DateTimePicker\n              fullWidth\n              label=\"End time\"\n              format=\"MMM D, hh:mm a\"\n              onChange={this.props.onChangeEnd}\n              value={this.props.endTime}\n              emptyLabel=\"now\"\n              disabled={this.props.endTime === null}\n            />\n          </Grid>\n        </Grid>\n      </MuiPickersUtilsProvider>\n    );\n  };\n}\n","import React, { Fragment } from \"react\";\nimport CustomButton from \"./CustomButton.js\";\nimport moment from \"moment\";\nimport config from \"../config/config.js\";\nimport { queryBuilder } from \"../helpers/builders.js\";\nimport DayRange from \"./DayRange.js\";\nimport {\n  Container,\n  Paper,\n  Grid,\n  Switch,\n  MenuItem,\n  Select,\n  withStyles,\n  InputLabel,\n  FormControl,\n  FormControlLabel,\n  Checkbox,\n  ExpansionPanel,\n  ExpansionPanelSummary,\n  ExpansionPanelDetails,\n  Typography,\n  Tooltip,\n  IconButton\n} from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport Sizing1Icon from \"@material-ui/icons/Filter1\";\nimport Sizing2Icon from \"@material-ui/icons/Filter2\";\nimport Sizing3Icon from \"@material-ui/icons/Filter3\";\nimport Sizing4Icon from \"@material-ui/icons/Filter4\";\n\nconst customStyle = theme => ({\n  select: {\n    minWidth: 120\n  },\n  container: {\n    padding: theme.spacing(2)\n  }\n});\n\nconst sizingIcons = {\n  1: <Sizing1Icon />,\n  2: <Sizing2Icon />,\n  3: <Sizing3Icon />,\n  4: <Sizing4Icon />\n};\n\nclass AppContainer extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startTime: moment(),\n      endTime: moment(),\n      liveMode: false,\n      updating: false,\n      dropdownOpen: false,\n      datasets: [],\n      data: {},\n      car: undefined,\n      sizing: 1\n    };\n  }\n\n  // Handler functions for our starttime change, which\n  // our dayrange will receieve as a prop\n  startTimeChangeHandler = time => {\n    this.setState({\n      startTime: time\n    });\n  };\n\n  endTimeChangeHandler = time => {\n    this.setState({\n      endTime: time\n    });\n  };\n\n  changeSizing = () => {\n    const max = Math.max(...Object.keys(sizingIcons));\n    this.setState({\n      sizing: this.state.sizing + 1 > max ? 1 : this.state.sizing + 1\n    });\n  };\n\n  // Handle the current boolean for \"live\" plotting\n  liveUpdateHandler = e => {\n    if (e.target.checked) {\n      this.setState({\n        liveMode: true,\n        endTime: null\n      });\n      this.intervalHandler();\n    } else {\n      clearTimeout(this.timeout);\n      this.setState({\n        liveMode: false\n      });\n      this.endTimeChangeHandler(moment());\n    }\n  };\n\n  intervalHandler = async () => {\n    await this.updateMetrics();\n    if (this.state.liveMode) {\n      this.timeout = setTimeout(this.intervalHandler, config.refreshInterval);\n    }\n  };\n\n  getDataHandler = async (lastCursor, retval, datasetId, handler) => {\n    let req = queryBuilder(\n      this.state.liveMode,\n      this.state.startTime,\n      this.state.endTime,\n      datasetId\n    );\n\n    if (lastCursor !== null) req.query.startCursor = lastCursor;\n\n    let response = await fetch(\n      config.datastore.getQueryUrl(),\n      config.datastore.generatePayload(this.props.token, JSON.stringify(req))\n    );\n\n    let json = await response.json();\n\n    try {\n      if (\"entityResults\" in json.batch) {\n        json.batch.entityResults.forEach(d => {\n          handler(retval, d);\n        });\n      }\n\n      // There are still results remaining\n      if (json.batch.moreResults === \"NOT_FINISHED\") {\n        return await this.getDataHandler(\n          json.batch.endCursor,\n          retval,\n          datasetId,\n          handler\n        );\n      }\n    } catch (error) {\n      console.log(error);\n    }\n    return retval;\n  };\n\n  getData = async () => {\n    let newData = {};\n\n    if (this.state.car) {\n      for (let dataset of config.datastore.datasets[this.state.car]) {\n        if (this.state.datasets.includes(dataset.label)) {\n          let data = await this.getDataHandler(\n            null,\n            [],\n            dataset.id,\n            dataset.handler\n          );\n          newData[dataset.id] = dataset.parser(data);\n        }\n      }\n    }\n\n    return newData;\n  };\n\n  updateMetrics = async () => {\n    this.setState({\n      updating: true\n    });\n\n    let newData = await this.getData();\n\n    this.setState({\n      updating: false,\n      data: newData\n    });\n  };\n\n  changeCar = e => {\n    if (e.target.value !== this.state.car) {\n      this.setState({\n        car: e.target.value,\n        data: {},\n        datasets: (config.datastore.datasets[e.target.value] || []).map(\n          data => data.label\n        )\n      });\n    }\n  };\n\n  populateCars = () => {\n    let ret = [];\n    for (let car in config.datastore.datasets) {\n      ret.push(\n        <MenuItem value={car} key={car}>\n          {car}\n        </MenuItem>\n      );\n    }\n    return ret;\n  };\n\n  modifyDatasets = e => {\n    if (e.target.checked) {\n      this.state.datasets.push(e.target.value);\n      this.setState({\n        datasets: this.state.datasets.slice()\n      });\n    } else {\n      this.setState({\n        datasets: this.state.datasets.filter(value => value !== e.target.value)\n      });\n    }\n  };\n\n  getCarProperties = () => {\n    return this.state.car ? (\n      config.datastore.datasets[this.state.car].map(data => {\n        return (\n          <Grid item key={data.label}>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  onChange={this.modifyDatasets}\n                  value={data.label}\n                  checked={this.state.datasets.includes(data.label)}\n                ></Checkbox>\n              }\n              label={data.label}\n            ></FormControlLabel>\n          </Grid>\n        );\n      })\n    ) : (\n      <Typography>You have to select a car first!</Typography>\n    );\n  };\n\n  render = () => {\n    const { classes } = this.props;\n\n    return (\n      <Fragment>\n        <Container className={classes.container}>\n          <ExpansionPanel>\n            <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n              <FormControl\n                onClick={e => e.stopPropagation()}\n                onFocus={e => e.stopPropagation()}\n              >\n                <Grid\n                  container\n                  spacing={1}\n                  alignItems=\"center\"\n                  justify=\"flex-start\"\n                >\n                  <Grid item>\n                    <DayRange\n                      startTime={this.state.startTime}\n                      endTime={this.state.endTime}\n                      onChangeStart={this.startTimeChangeHandler}\n                      onChangeEnd={this.endTimeChangeHandler}\n                    />\n                  </Grid>\n                  <Grid item>\n                    <Grid\n                      container\n                      spacing={1}\n                      alignItems=\"center\"\n                      justify=\"flex-start\"\n                    >\n                      <Grid item xs={12} sm=\"auto\">\n                        <FormControl>\n                          <InputLabel>Car</InputLabel>\n                          <Select\n                            className={classes.select}\n                            label=\"Car\"\n                            value={this.state.car || \"\"}\n                            onChange={this.changeCar}\n                          >\n                            {this.populateCars()}\n                          </Select>\n                        </FormControl>\n                      </Grid>\n                      <Grid item xs=\"auto\" sm=\"auto\">\n                        <Tooltip title=\"Live mode\">\n                          <Switch\n                            checked={this.state.liveMode}\n                            onChange={this.liveUpdateHandler}\n                          />\n                        </Tooltip>\n                      </Grid>\n                      <Grid item xs=\"auto\" sm=\"auto\">\n                        <Tooltip title=\"Change density\">\n                          <IconButton onClick={this.changeSizing}>\n                            {sizingIcons[this.state.sizing]}\n                          </IconButton>\n                        </Tooltip>\n                      </Grid>\n                      <Grid item xs=\"auto\" sm=\"auto\">\n                        <CustomButton\n                          liveMode={this.state.liveMode}\n                          getDataHandler={this.updateMetrics}\n                          updating={this.state.updating}\n                        />\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </FormControl>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails>\n              <Grid container spacing={1} alignItems=\"center\" justify=\"center\">\n                {this.getCarProperties()}\n              </Grid>\n            </ExpansionPanelDetails>\n          </ExpansionPanel>\n        </Container>\n\n        <Container className={classes.container}>\n          <Grid container spacing={2}>\n            {this.state.car\n              ? config.datastore.datasets[this.state.car]\n                  .filter(data => this.state.datasets.includes(data.label))\n                  .map((dataset, index) => {\n                    return (\n                      <Grid\n                        item\n                        xs={12 / this.state.sizing}\n                        key={index + this.state.sizing}\n                      >\n                        <Paper>\n                          {dataset.element(this.state.data[dataset.id])}\n                        </Paper>\n                      </Grid>\n                    );\n                  })\n              : undefined}\n          </Grid>\n        </Container>\n      </Fragment>\n    );\n  };\n}\n\nexport default withStyles(customStyle)(AppContainer);\n","import config from \"./config/config.js\";\nimport GoogleLogin from \"react-google-login\";\nimport AppContainer from \"./components/AppContainer.js\";\nimport React from \"react\";\nimport {\n  CssBaseline,\n  Container,\n  Grid,\n  withStyles\n} from \"@material-ui/core\";\n\nconst customStyle = {\n  root: {\n    paddingTop: 200\n  }\n};\n\nclass App extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loggedOn: false,\n      token: undefined\n    };\n  }\n\n  oauthSuccess = response => {\n    this.setState({\n      loggedOn: true,\n      token: response.accessToken\n    });\n  };\n\n  oauthFailure = response => {\n    console.log(response, \"Oauth Failed.\");\n  };\n\n  render = () => {\n    const { classes } = this.props;\n    return (\n      <CssBaseline>\n        {this.state.loggedOn ? (\n          <AppContainer token={this.state.token} />\n        ) : (\n          <Container maxWidth=\"xs\" className={classes.root}>\n            <Grid container spacing={2} justify=\"center\" alignItems=\"center\">\n              <Grid container justify=\"center\">\n                <Grid item>\n                  <GoogleLogin\n                    clientId={config.oauth.clientId}\n                    scope=\"profile email https://www.googleapis.com/auth/datastore\"\n                    buttonText=\"Login\"\n                    onSuccess={this.oauthSuccess}\n                    onFailure={this.oauthFailure}\n                  />\n                </Grid>\n              </Grid>\n            </Grid>\n          </Container>\n        )}\n      </CssBaseline>\n    );\n  };\n}\n\nexport default withStyles(customStyle)(App);\n","import App from \"./App.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}