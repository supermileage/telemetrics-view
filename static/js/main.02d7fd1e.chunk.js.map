{"version":3,"sources":["index.js"],"names":["data","datasets","spanGaps","showLine","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","request","state","current","query","filter","propertyFilter","op","property","name","value","stringValue","startTime","toISOString","kind","projection","compositeFilter","filters","endTime","shortcuts","Today","moment","Yesterday","subtract","GraphContainer","props","_this","Object","C_Users_lesli_telemetrics_view_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__","this","C_Users_lesli_telemetrics_view_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__","C_Users_lesli_telemetrics_view_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__","call","handleChangeStart","time","setState","handleChangeEnd","handleCurrent","e","target","checked","intervalHandler","clearTimeout","timeout","C_Users_lesli_telemetrics_view_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__","C_Users_lesli_telemetrics_view_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default","a","mark","_callee","wrap","_context","prev","next","getData","console","log","setTimeout","stop","getDataHandler","_callee2","req","_context2","lastCursor","startCursor","fetch","method","headers","Authorization","token","Accept","Content-Type","body","JSON","stringify","then","val","json","batch","vals","slice","entityResults","forEach","d","elem","y","parseFloat","entity","properties","x","published_at","length","unix","push","NaN","moreResults","endCursor","error","_callee3","newData","_context3","updating","C_Users_lesli_telemetrics_view_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","graph","responseGoogle","response","loggedIn","accessToken","responseFail","buttonProvider","react__WEBPACK_IMPORTED_MODULE_8___default","createElement","className","onClick","disabled","infoHide","infoOn","animations","header","undefined","DayRange","startVal","endVal","onChangeStart","onChangeEnd","react_toggle__WEBPACK_IMPORTED_MODULE_13___default","defaultChecked","onChange","Graph","react_google_login__WEBPACK_IMPORTED_MODULE_14___default","clientId","buttonText","onSuccess","onFailure","React","Component","render","react_chartjs_2__WEBPACK_IMPORTED_MODULE_10__","_this2","options","animation","duration","scales","xAxes","gridLines","display","type","distribution","scaleLabel","labelString","yAxes","rc_datetime_picker__WEBPACK_IMPORTED_MODULE_12__","format","readOnly","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.02d7fd1e.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Scatter} from 'react-chartjs-2';\r\nimport moment from 'moment';\r\nimport {DatetimePickerTrigger} from 'rc-datetime-picker';\r\nimport Toggle from 'react-toggle';\r\nimport GoogleLogin from 'react-google-login';\r\nimport './datetime.css';\r\nimport './toggle.css';\r\nimport './index.css';\r\nimport 'bulma/css/bulma.css';\r\n\r\nconst data = {\r\n  datasets: [\r\n    {\r\n      spanGaps: false,\r\n      showLine: true,\r\n      label: 'Datapoints',\r\n      fill: true,\r\n      lineTension: 0.1,\r\n      backgroundColor: 'rgba(75,192,192,0.4)',\r\n      borderColor: 'rgba(75,192,192,1)',\r\n      borderCapStyle: 'butt',\r\n      borderDash: [],\r\n      borderDashOffset: 0.0,\r\n      borderJoinStyle: 'miter',\r\n      pointBorderColor: 'rgba(75,192,192,1)',\r\n      pointBackgroundColor: '#fff',\r\n      pointBorderWidth: 1,\r\n      pointHoverRadius: 5,\r\n      pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n      pointHoverBorderWidth: 2,\r\n      pointRadius: 1,\r\n      pointHitRadius: 10,\r\n      data: [] // Data to update\r\n    }\r\n  ],\r\n};\r\n\r\nconst request = (state) => {\r\n  return (state.current) ? {\r\n    query: {\r\n      filter: {\r\n        propertyFilter: {\r\n          op: \"GREATER_THAN_OR_EQUAL\",\r\n          property: {\r\n            name: \"published_at\"\r\n          },\r\n          value: {\r\n            stringValue: state.startTime.toISOString()\r\n          }\r\n        }\r\n      },\r\n      kind: [\r\n        {\r\n          name: \"ParticleEvent\"\r\n        }\r\n      ],\r\n      projection: [\r\n        {\r\n          property: {\r\n            name: \"data\"\r\n          }\r\n        },\r\n        {\r\n          property: {\r\n            name: \"published_at\"\r\n          }\r\n        }\r\n      ],\r\n    }\r\n    } : {\r\n      query: {\r\n        filter: {\r\n          compositeFilter: {\r\n            filters: [\r\n              {\r\n                propertyFilter: {\r\n                  op: \"GREATER_THAN_OR_EQUAL\",\r\n                  property: {\r\n                    name: \"published_at\"\r\n                  },\r\n                  value: {\r\n                    stringValue: state.startTime.toISOString()\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                propertyFilter: {\r\n                  op: \"LESS_THAN_OR_EQUAL\",\r\n                  property: {\r\n                    name: \"published_at\"\r\n                  },\r\n                  value: {\r\n                    stringValue: state.endTime.toISOString()\r\n                  }\r\n                }\r\n              }\r\n            ],\r\n            op: \"AND\"\r\n          }\r\n        }\r\n        ,\r\n        kind: [\r\n          {\r\n            name: \"ParticleEvent\"\r\n          }\r\n        ],\r\n        projection: [\r\n          {\r\n            property: {\r\n              name: \"data\"\r\n            }\r\n          },\r\n          {\r\n            property: {\r\n              name: \"published_at\"\r\n            }\r\n          }\r\n        ]\r\n      }\r\n  }\r\n};\r\n\r\nconst shortcuts = {\r\n  'Today': moment(),\r\n  'Yesterday': moment().subtract(1, 'days'),\r\n};\r\n\r\n// Our graph container to hold all our objects, and also\r\n// to store state of our objects\r\nclass GraphContainer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.lastCursor = null;\r\n    this.vals = [];\r\n    this.state = {\r\n      startTime: moment(),\r\n      endTime: moment(),\r\n      current: false,\r\n      loggedIn: false,\r\n      graph: data,\r\n      animations: true,\r\n      updating: false,\r\n      infoOn: true\r\n    }\r\n  }\r\n\r\n  // Handle the start time change\r\n  handleChangeStart = (time) => {\r\n    this.setState({\r\n      startTime: time\r\n    })\r\n  }\r\n\r\n  // Handle the end time change\r\n  handleChangeEnd = (time) => {\r\n    this.setState({\r\n      endTime: time\r\n    })\r\n  }\r\n\r\n  // Handle the current boolean for \"live\" plotting\r\n  handleCurrent = (e) => {\r\n    let current = e.target.checked;\r\n    if (current) {\r\n      this.setState({\r\n        current: true,\r\n        endTime: null\r\n      })\r\n      this.intervalHandler();\r\n    } else {\r\n      clearTimeout(this.timeout);\r\n      this.setState({\r\n        current: false\r\n      })\r\n      this.handleChangeEnd(moment());\r\n    }\r\n  }\r\n\r\n  intervalHandler = async () => {\r\n    await this.getData();\r\n    console.log(\"get data done, resetting\");\r\n    if (this.state.current) {\r\n      this.timeout = setTimeout(this.intervalHandler, 2000);\r\n    }\r\n  }\r\n\r\n  // POST using OAuth creds to retrieve datastore based on time\r\n  // Async means it returns an implicit Promise that we will resolve later\r\n  getDataHandler = async () => {\r\n    // Build our query\r\n    let req = request(this.state);\r\n\r\n    // Change our lastCursor value\r\n    if (this.lastCursor !== null) req.query.startCursor = this.lastCursor;\r\n    // Call our fetch\r\n    await fetch('https://datastore.googleapis.com/v1/projects/ubc-supermileage-telemetry-v2:runQuery?prettyPrint=true&alt=json', \r\n      {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization' : 'Bearer ' + this.token,\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(req)}).then(val => val.json().then(e => {\r\n        // Try safety\r\n        console.log(e);\r\n        try {\r\n          if ('entityResults' in e.batch) {\r\n            console.log()\r\n            if (this.lastCursor === null) {\r\n              this.vals = [];\r\n            } else {\r\n              this.vals = this.vals.slice(); // Return a copy\r\n            }\r\n            e.batch.entityResults.forEach(d => {\r\n              let elem = {};\r\n              elem.y = parseFloat(d.entity.properties.data.stringValue);\r\n              elem.x = moment(d.entity.properties.published_at.stringValue);\r\n              // Check if the last element was greater than 10 minutes ago\r\n              if (this.vals.length > 0 && elem.x.unix() - moment(this.vals[this.vals.length - 1].x).unix() > 600) {\r\n                this.vals.push({\r\n                  y: NaN,\r\n                  x: elem.x\r\n                });\r\n              }\r\n              this.vals.push(elem);\r\n            });\r\n          } else {\r\n            // Clear our values\r\n            this.vals = [];\r\n          }\r\n          if (e.batch.moreResults === \"NOT_FINISHED\") {\r\n            console.log(\"Not done\");\r\n            this.lastCursor = e.batch.endCursor;\r\n            return this.getDataHandler();\r\n          }\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n        console.log(\"Done\");\r\n        this.lastCursor = null;\r\n        return true;\r\n      }));\r\n  }\r\n\r\n  // Handler for our data, which sets up a promise \r\n  // that updates once our data has been set up\r\n  getData = async () => {\r\n    this.setState({\r\n      updating: true // Set updating to true so we render notice\r\n    });\r\n    await this.getDataHandler();\r\n    console.log(\"data handling done\");\r\n    let newData = {\r\n      ...this.state.graph.datasets[0], // Spread operator allows us to copy things\r\n      data: this.vals\r\n      };\r\n    this.setState({\r\n      graph: {\r\n        datasets: [newData]\r\n      },\r\n      updating: false // done updating\r\n    });\r\n  }\r\n\r\n  // OAuth authorized, do stuff\r\n  responseGoogle = (response) => {\r\n    this.setState({\r\n      loggedIn: true\r\n    });\r\n    console.log(response);\r\n    console.log(\"Success\");\r\n    this.token = response.accessToken;\r\n  }\r\n\r\n  // OAuth failed, don't do stuff\r\n  responseFail = (response) => {\r\n    console.log(response);\r\n    console.log(\"Failed\");\r\n  }\r\n\r\n  // This code sucks\r\n  buttonProvider = () => {\r\n    return (this.state.current) ? (<button \r\n      className=\"button is-rounded is-info is-small is-loading\" \r\n      onClick={this.getData} \r\n      disabled\r\n    >Update</button>) : (this.state.updating) ? (<button \r\n      className=\"button is-rounded is-info is-small is-loading\" \r\n      onClick={this.getData}\r\n      disabled\r\n    >Update</button>) : (<button \r\n      className=\"button is-rounded is-info is-small\" \r\n      onClick={this.getData} \r\n    >Update</button>);\r\n  }\r\n\r\n  infoHide = () => {\r\n    this.setState({\r\n      infoOn: false\r\n    });\r\n  }\r\n\r\n  // Render element based on logged in state\r\n  render() {\r\n    const header = (<div className=\"container\"><div className=\"notification is-info\">Welcome! If it's your first time here,\r\n    the toggle sets whether the data is updated live. Otherwise, you can grab specific data by selecting \r\n    your time range, then pressing \"Update\". You may encounter errors if you're not authorized to access the \r\n    datastore. You can close this message on the top right.\r\n    <button onClick={this.infoHide} className=\"delete\"></button>\r\n    </div></div>);\r\n    if (!this.state.loggedIn) {\r\n      return (<div>\r\n      <div className=\"container notification is-link floater\">To get started, log in to generate an OAuth token.</div>\r\n      <div className=\"login\">\r\n        <GoogleLogin\r\n          clientId = \"617338661646-v92ol8vhd4nl44vpntkv4jpjbq5hahmo.apps.googleusercontent.com\"\r\n          buttonText = \"Login\"\r\n          onSuccess = {this.responseGoogle}\r\n          onFailure = {this.responseFail} \r\n        /></div></div>);\r\n    } else {\r\n      return (<div>\r\n      {(this.state.infoOn) ? header : undefined}\r\n      <div className=\"container notification\">\r\n        <div className=\"columns\">\r\n          <div className=\"column is-narrow\">\r\n            <DayRange\r\n              startVal = {this.state.startTime}\r\n              endVal = {this.state.endTime}\r\n              onChangeStart = {this.handleChangeStart}\r\n              onChangeEnd = {this.handleChangeEnd}\r\n            />\r\n          </div>\r\n          <div className=\"column\">\r\n            <div className=\"columns is-mobile\">\r\n              <div className=\"toggle column is-narrow\">\r\n                <Toggle\r\n                  defaultChecked = {this.state.current}\r\n                  onChange = {this.handleCurrent}\r\n                />\r\n              </div>\r\n              <div className=\"column is-narrow\">\r\n                {this.buttonProvider()}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"container notification has-background-white-bis\">\r\n        <Graph\r\n          data = {this.state.graph}\r\n          animations = {this.state.animations}\r\n        />\r\n      </div>\r\n      </div>);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Component that holds our graph object. \r\n */\r\nclass Graph extends React.Component {\r\n  render = () => {\r\n    return (<div>\r\n      <Scatter \r\n        data = {this.props.data}\r\n        options={{\r\n          animation: ((this.props.animations) ? {\r\n            duration : 500,\r\n          } : false),\r\n          scales : {\r\n            xAxes: [{\r\n              gridLines: {\r\n                display: false,\r\n              },\r\n              type: 'time',\r\n              distribution: 'linear', // Distances can vary, based on time\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: \"Time\"\r\n              },\r\n            }],\r\n            yAxes: [{\r\n              gridLines: {\r\n                display: false,\r\n              },\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: \"Velocity\"\r\n              },\r\n            }]\r\n          },\r\n        }}\r\n      />\r\n    </div>);\r\n  }\r\n}\r\n\r\n\r\nclass DayRange extends React.Component {\r\n  // Render my pickers; all the state is lifted up into \r\n  // the parent element, thus all the changes are handled\r\n  // by props; this element does not have state\r\n  render() {\r\n    return (<div className=\"columns\">\r\n        <div className=\"column\">\r\n          <DatetimePickerTrigger\r\n            className = \"input is-rounded is-small\"\r\n            shortcuts = {shortcuts}\r\n            moment = {this.props.startVal}\r\n            onChange = {this.props.onChangeStart}>\r\n            <input type=\"text\" value={this.props.startVal.format('YYYY-MM-DD HH:mm')} readOnly />\r\n          </DatetimePickerTrigger>\r\n          </div>\r\n        <div className=\"column\">\r\n          <DatetimePickerTrigger\r\n            className = \"input is-rounded is-small\"\r\n            shortcuts = {shortcuts}\r\n            moment = {this.props.endVal}\r\n            onChange = {this.props.onChangeEnd}\r\n            disabled = {(this.props.endVal === null) ? true : false}>\r\n            <input \r\n              type = \"text\" \r\n              value = {(this.props.endVal === null) ?\r\n                \"Current\" : this.props.endVal.format('YYYY-MM-DD HH:mm')} \r\n              readOnly\r\n              disabled = {(this.props.endVal === null) ? true : false}\r\n            />\r\n          </DatetimePickerTrigger>\r\n        </div>\r\n      </div>);\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <GraphContainer />,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}