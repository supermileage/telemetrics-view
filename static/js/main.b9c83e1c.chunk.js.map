{"version":3,"sources":["helpers/builders.js","components/Graph.js","components/Map.js","config/config.js","config/datasets.js","components/Button.js","components/DayRange.js","components/Container.js","App.js","index.js"],"names":["chartBuilder","label","id","data","datasets","spanGaps","showLine","yAxisID","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","queryBuilder","liveMode","startTime","endTime","query","filter","compositeFilter","filters","propertyFilter","op","property","name","value","stringValue","toISOString","kind","projection","Graph","render","props","options","React","Component","Map","initMap","map","window","google","maps","document","getElementById","config","defaults","setState","loaded","drawLineOnMap","length","state","panTo","LatLng","Math","floor","lat","lng","lines","Polyline","path","setMap","setPath","drawMarkersOnMap","position","marker","Marker","info","InfoWindow","content","Date","timestamp","toLocaleTimeString","addListener","open","close","componentDidMount","tag","createElement","async","src","getSrcUrl","body","appendChild","componentWillUnmount","querySelector","remove","undefined","datastore","projectId","getQueryUrl","this","generatePayload","token","method","headers","Authorization","Accept","Urban","handler","retval","d","retVals","entity","properties","split","elem","y","parseFloat","x","moment","published_at","unix","push","NaN","parser","element","className","key","animation","duration","scales","xAxes","gridLines","display","type","distribution","scaleLabel","labelString","yAxes","NMEASeq","parseInt","Proto","indexOf","oauth","clientId","apiKey","center","zoom","Button","updating","onClick","getDataHandler","disabled","DayRange","shortcuts","Today","Yesterday","subtract","onChange","onChangeStart","format","readOnly","onChangeEnd","Container","startTimeChangeHandler","time","endTimeChangeHandler","liveUpdateHandler","e","target","checked","intervalHandler","clearTimeout","timeout","a","updateMetrics","setTimeout","lastCursor","dataset","req","startCursor","fetch","JSON","stringify","response","json","batch","entityResults","forEach","moreResults","endCursor","console","log","getData","newData","car","changeCar","populateCars","ret","defaultChecked","controls","role","index","App","oauthSuccess","loggedOn","accessToken","oauthFailure","infoHide","infoOn","headerInfo","headerLogin","scope","buttonText","onSuccess","onFailure","ReactDOM"],"mappings":"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","file":"static/js/main.b9c83e1c.chunk.js","sourcesContent":["export const chartBuilder = (label, id, data) => {\n  return {\n    datasets: [\n      {\n        spanGaps: false,\n        showLine: true,\n        label: label,\n        yAxisID: id,\n        fill: true,\n        lineTension: 0.1,\n        backgroundColor: \"rgba(75,192,192,0.4)\",\n        borderColor: \"rgba(75,192,192,1)\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgba(75,192,192,1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: data\n      }\n    ]\n  };\n};\n\nexport const queryBuilder = (liveMode, startTime, endTime, id) => {\n  return liveMode\n    ? {\n        query: {\n          filter: {\n            compositeFilter: {\n              filters: [\n                {\n                  propertyFilter: {\n                    op: \"GREATER_THAN_OR_EQUAL\",\n                    property: {\n                      name: \"published_at\"\n                    },\n                    value: {\n                      stringValue: startTime.toISOString()\n                    }\n                  }\n                },\n                {\n                  propertyFilter: {\n                    op: \"EQUAL\",\n                    property: {\n                      name: \"event\"\n                    },\n                    value: {\n                      stringValue: id\n                    }\n                  }\n                }\n              ],\n              op: \"AND\"\n            }\n          },\n          kind: [\n            {\n              name: \"ParticleEvent\"\n            }\n          ],\n          projection: [\n            {\n              property: {\n                name: \"data\"\n              }\n            },\n            {\n              property: {\n                name: \"published_at\"\n              }\n            }\n          ]\n        }\n      }\n    : {\n        query: {\n          filter: {\n            compositeFilter: {\n              filters: [\n                {\n                  propertyFilter: {\n                    op: \"GREATER_THAN_OR_EQUAL\",\n                    property: {\n                      name: \"published_at\"\n                    },\n                    value: {\n                      stringValue: startTime.toISOString()\n                    }\n                  }\n                },\n                {\n                  propertyFilter: {\n                    op: \"LESS_THAN_OR_EQUAL\",\n                    property: {\n                      name: \"published_at\"\n                    },\n                    value: {\n                      stringValue: endTime.toISOString()\n                    }\n                  }\n                },\n                {\n                  propertyFilter: {\n                    op: \"EQUAL\",\n                    property: {\n                      name: \"event\"\n                    },\n                    value: {\n                      stringValue: id\n                    }\n                  }\n                }\n              ],\n              op: \"AND\"\n            }\n          },\n          kind: [\n            {\n              name: \"ParticleEvent\"\n            }\n          ],\n          projection: [\n            {\n              property: {\n                name: \"data\"\n              }\n            },\n            {\n              property: {\n                name: \"published_at\"\n              }\n            }\n          ]\n        }\n      };\n};\n","import { Scatter } from \"react-chartjs-2\";\nimport React from \"react\";\n\n/**\n * Component that holds our graph object.\n */\nexport default class Graph extends React.Component {\n  render = () => {\n    return (\n      <div>\n        <Scatter data={this.props.data} options={this.props.options} />\n      </div>\n    );\n  };\n}\n","import React from \"react\";\nimport config from \"../config/config.js\";\n\n/**\n * Component that holds our Google map.\n */\nexport default class Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.lines = null;\n    this.state = {\n      map: null,\n      loaded: false\n    };\n  }\n\n  initMap = () => {\n    let map = new window.google.maps.Map(\n      document.getElementById(\"map\"),\n      config.map.defaults\n    );\n    this.setState({\n      map: map,\n      loaded: true\n    });\n  };\n\n  drawLineOnMap = () => {\n    // If there were valid coordinates, do stuff\n    if (this.props.data && this.props.data.length > 0) {\n      // Center around middle element\n      this.state.map.panTo(\n        new window.google.maps.LatLng(\n          this.props.data[Math.floor(this.props.data.length / 2)].lat,\n          this.props.data[Math.floor(this.props.data.length / 2)].lng\n        )\n      );\n      // If no line initialized, initialize it\n      if (this.lines === null) {\n        // Set the state\n        this.lines = new window.google.maps.Polyline({\n          path: this.props.data, // This is just an array of coordinates\n          map: this.state.map\n        });\n      } else {\n        this.lines.setMap(this.state.map);\n        this.lines.setPath(this.props.data);\n      }\n    } else {\n      // Clear the map property from the line\n      if (this.lines !== null) {\n        this.lines.setMap(null);\n      }\n    }\n  };\n\n  drawMarkersOnMap = () => {\n    if (this.props.data && this.props.data.length > 0) {\n      this.props.data.map(position => {\n        let marker = new window.google.maps.Marker({\n          position: position,\n          map: this.state.map\n        });\n        let info = new window.google.maps.InfoWindow({\n          content: new Date(position.timestamp).toLocaleTimeString()\n        });\n        marker.addListener(\"mouseover\", () => {\n          info.open(this.state.map, marker);\n        });\n        marker.addListener(\"mouseout\", function() {\n          info.close();\n        })\n      })\n    }\n  }\n\n  // Load the Google map script when this component mounts\n  componentDidMount = () => {\n    window.initMap = this.initMap;\n    let tag = document.createElement(\"script\");\n    tag.async = true;\n    // Loads only from specific endpoints, safe to commit\n    tag.src = config.map.getSrcUrl();\n    // Append the script\n    document.body.appendChild(tag);\n  };\n\n  componentWillUnmount = () => {\n    document.querySelector(`[src=\"${config.map.getSrcUrl()}\"`).remove();\n    window.google.maps = undefined;\n  };\n\n  render = () => {\n    if (this.state.loaded) {\n      this.drawLineOnMap();\n      this.drawMarkersOnMap();\n    }\n    return <div id=\"map\"></div>;\n  };\n}\n","import datasets from \"./datasets.js\";\n\nlet config = {\n  datastore: {\n    // https://cloud.google.com/datastore/docs/reference/data/rest/v1/projects/runQuery\n    projectId: \"telemetry-urban-sm\",\n    getQueryUrl: function() {\n      return (\n        \"https://datastore.googleapis.com/v1/projects/\" +\n        this.projectId +\n        \":runQuery?alt=json\"\n      );\n    },\n    generatePayload: (token, body) => {\n      return {\n        method: \"POST\",\n        headers: {\n          Authorization: \"Bearer \" + token,\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: body\n      };\n    },\n    datasets: datasets\n  },\n  oauth: {\n    clientId:\n      \"361835365952-be92snngmdj4q3p52bs05u31qd8vq4gb.apps.googleusercontent.com\"\n  },\n  map: {\n    // Non-secret, so we can commit this\n    apiKey: \"AIzaSyC5l2tTNWl1b3vliRAbpWD_r3jZXrV85kA\",\n    getSrcUrl: function() {\n      return (\n        \"https://maps.googleapis.com/maps/api/js?key=\" +\n        this.apiKey +\n        \"&callback=initMap\"\n      );\n    },\n    defaults: {\n      // Vancouver\n      center: { lat: 49.267941, lng: -123.24736 },\n      zoom: 12\n    }\n  }\n};\n\nexport default config;","import moment from \"moment\";\nimport { chartBuilder } from \"../helpers/builders.js\";\nimport React from \"react\";\nimport Graph from \"../components/Graph.js\";\nimport Map from \"../components/Map.js\";\n\nlet datasets = {\n  Urban: [\n    {\n      label: \"Temperature\",\n      id: \"Temperature\",\n      handler: function(retval, d) {\n        let retVals = d.entity.properties.data.stringValue.split(\" \");\n        let elem = {};\n        elem.y = parseFloat(retVals[0]);\n        elem.x = moment(d.entity.properties.published_at.stringValue);\n\n        // Check if the last element was greater than 10 minutes ago, we disjoint it then\n        if (\n          retval.length > 0 &&\n          elem.x.unix() - moment(retval[retval.length - 1].x).unix() > 600\n        ) {\n          retval.push({\n            y: NaN,\n            x: elem.x\n          });\n        }\n        retval.push(elem);\n      },\n      parser: function(label, id, data) {\n        return chartBuilder(label, id, data);\n      },\n      element: function(data) {\n        return (\n          <div className=\"column is-half-desktop\" key={this.id}>\n            <Graph data={data || {}} options={this.options} />\n          </div>\n        );\n      },\n      options: {\n        animation: {\n          duration: 500\n        },\n        scales: {\n          xAxes: [\n            {\n              gridLines: {\n                display: false\n              },\n              type: \"time\",\n              distribution: \"linear\", // Distances can vary, based on time\n              scaleLabel: {\n                display: true,\n                labelString: \"Time\"\n              }\n            }\n          ],\n          yAxes: [\n            {\n              id: \"Temperature\",\n              position: \"left\",\n              gridLines: {\n                display: false\n              },\n              scaleLabel: {\n                display: true,\n                labelString: \"Temperature (C)\"\n              }\n            }\n          ]\n        }\n      }\n    },\n    {\n      label: \"Power\",\n      id: \"Power\",\n      handler: function(retval, d) {\n        let elem = {};\n        elem.y = parseFloat(d.entity.properties.data.stringValue);\n        elem.x = moment(d.entity.properties.published_at.stringValue);\n\n        // Check if the last element was greater than 10 minutes ago, we disjoint it then\n        if (\n          retval.length > 0 &&\n          elem.x.unix() - moment(retval[retval.length - 1].x).unix() > 600\n        ) {\n          retval.push({\n            y: NaN,\n            x: elem.x\n          });\n        }\n        retval.push(elem);\n      },\n      parser: function(label, id, data) {\n        return chartBuilder(label, id, data);\n      },\n      element: function(data) {\n        return (\n          <div className=\"column is-half-desktop\" key={this.id}>\n            <Graph data={data || {}} options={this.options} />\n          </div>\n        );\n      },\n      options: {\n        animation: {\n          duration: 500\n        },\n        scales: {\n          xAxes: [\n            {\n              gridLines: {\n                display: false\n              },\n              type: \"time\",\n              distribution: \"linear\", // Distances can vary, based on time\n              scaleLabel: {\n                display: true,\n                labelString: \"Time\"\n              }\n            }\n          ],\n          yAxes: [\n            {\n              id: \"Power\",\n              position: \"left\",\n              gridLines: {\n                display: false\n              },\n              scaleLabel: {\n                display: true,\n                labelString: \"State of Charge (%)\"\n              }\n            }\n          ]\n        }\n      }\n    },\n    {\n      label: \"Location\",\n      id: \"Location\",\n      handler: function(retval, d) {\n        let NMEASeq = d.entity.properties.data.stringValue.split(\",\");\n        let lat =\n          parseInt(parseInt(NMEASeq[3]) / 100) +\n          parseFloat(parseFloat(NMEASeq[3]) % 100) / 60;\n        let lng =\n          parseInt(parseInt(NMEASeq[5]) / 100) +\n          parseFloat(parseFloat(NMEASeq[5]) % 100) / 60;\n        lat = NMEASeq[4] === \"S\" ? -lat : lat;\n        lng = NMEASeq[6] === \"W\" ? -lng : lng;\n        let elem = { lat, lng };\n        retval.push(elem);\n      },\n      parser: function(label, id, data) {\n        return data;\n      },\n      element: function(data) {\n        return (\n          <div className=\"column is-full\" key={this.id}>\n            <Map data={data || []} />\n          </div>\n        );\n      }\n    }\n  ],\n  Proto: [\n    {\n      label: \"Speed\",\n      id: \"PROTO-Speed\",\n      handler: function(retval, d) {\n        let data = d.entity.properties.data.stringValue.split(\",\");\n        \n        let elem = {};\n        elem.y = parseFloat(data[data.indexOf(\"K\") - 1]);\n        elem.x = moment(d.entity.properties.published_at.stringValue);\n\n        // Check if the last element was greater than 10 minutes ago, we disjoint it then\n        if (\n          retval.length > 0 &&\n          elem.x.unix() - moment(retval[retval.length - 1].x).unix() > 600\n        ) {\n          retval.push({\n            y: NaN,\n            x: elem.x\n          });\n        }\n        retval.push(elem);\n      },\n      parser: function(label, id, data) {\n        return chartBuilder(label, id, data);\n      },\n      element: function(data) {\n        return (\n          <div className=\"column\" key={this.id}>\n            <Graph data={data || {}} options={this.options} />\n          </div>\n        );\n      },\n      options: {\n        animation: {\n          duration: 500\n        },\n        scales: {\n          xAxes: [\n            {\n              gridLines: {\n                display: false\n              },\n              type: \"time\",\n              distribution: \"linear\", // Distances can vary, based on time\n              scaleLabel: {\n                display: true,\n                labelString: \"Time\"\n              }\n            }\n          ],\n          yAxes: [\n            {\n              id: \"PROTO-Speed\",\n              position: \"left\",\n              gridLines: {\n                display: false\n              },\n              scaleLabel: {\n                display: true,\n                labelString: \"km/h\"\n              }\n            }\n          ]\n        }\n      }\n    },\n    {\n      label: \"Location\",\n      id: \"PROTO-Location\",\n      handler: function(retval, d) {\n        let NMEASeq = d.entity.properties.data.stringValue.split(\",\");\n        let lat =\n          parseInt(parseInt(NMEASeq[3]) / 100) +\n          parseFloat(parseFloat(NMEASeq[3]) % 100) / 60;\n        let lng =\n          parseInt(parseInt(NMEASeq[5]) / 100) +\n          parseFloat(parseFloat(NMEASeq[5]) % 100) / 60;\n        lat = NMEASeq[4] === \"S\" ? -lat : lat;\n        lng = NMEASeq[6] === \"W\" ? -lng : lng;\n        let timestamp = d.entity.properties.published_at.stringValue;\n        let elem = { lat, lng, timestamp };\n        retval.push(elem);\n      },\n      parser: function(label, id, data) {\n        return data;\n      },\n      element: function(data) {\n        return (\n          <div className=\"column is-full\" key={this.id}>\n            <Map data={data || []} />\n          </div>\n        );\n      }\n    }\n  ]\n};\n\nexport default datasets;\n","import React from \"react\";\n\nexport default class Button extends React.Component {\n  render = () => {\n    return this.props.liveMode || this.props.updating ? (\n      <button\n        className=\"button is-info is-loading\"\n        onClick={this.props.getDataHandler}\n        disabled\n      >\n        Update\n      </button>\n    ) : (\n      <button className=\"button is-info\" onClick={this.props.getDataHandler}>\n        Update\n      </button>\n    );\n  };\n}\n","import React from \"react\";\nimport moment from \"moment\";\nimport { DatetimePickerTrigger } from \"rc-datetime-picker\";\nimport \"../css/datetime.css\";\n\nexport default class DayRange extends React.Component {\n  // Render my pickers; all the state is lifted up into\n  // the parent element, thus all the changes are handled\n  // by props; this element does not have state\n  render = () => {\n    const shortcuts = {\n      Today: moment(),\n      Yesterday: moment().subtract(1, \"days\")\n    };\n    return (\n      <div className=\"columns\">\n        <div className=\"column\">\n          <DatetimePickerTrigger\n            className=\"input\"\n            shortcuts={shortcuts}\n            moment={this.props.startTime}\n            onChange={this.props.onChangeStart}\n          >\n            <input\n              type=\"text\"\n              value={this.props.startTime.format(\"YYYY-MM-DD HH:mm\")}\n              readOnly\n            />\n          </DatetimePickerTrigger>\n        </div>\n        <div className=\"column\">\n          <DatetimePickerTrigger\n            className=\"input\"\n            shortcuts={shortcuts}\n            moment={this.props.endTime}\n            onChange={this.props.onChangeEnd}\n            disabled={this.props.endTime === null ? true : false}\n          >\n            <input\n              type=\"text\"\n              value={\n                this.props.endTime === null\n                  ? \"Current\"\n                  : this.props.endTime.format(\"YYYY-MM-DD HH:mm\")\n              }\n              readOnly\n              disabled={this.props.endTime === null ? true : false}\n            />\n          </DatetimePickerTrigger>\n        </div>\n      </div>\n    );\n  };\n}\n","import React from \"react\";\nimport Toggle from \"react-toggle\";\nimport Button from \"./Button.js\";\nimport moment from \"moment\";\nimport \"../css/toggle.css\";\nimport config from \"../config/config.js\";\nimport { queryBuilder } from \"../helpers/builders.js\";\nimport DayRange from \"./DayRange.js\";\n\nexport default class Container extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startTime: moment(),\n      endTime: moment(),\n      liveMode: false,\n      updating: false,\n      data: {},\n      car: \"Urban\"\n    };\n  }\n\n  // Handler functions for our starttime change, which\n  // our dayrange will receieve as a prop\n  startTimeChangeHandler = time => {\n    this.setState({\n      startTime: time\n    });\n  };\n\n  endTimeChangeHandler = time => {\n    this.setState({\n      endTime: time\n    });\n  };\n\n  // Handle the current boolean for \"live\" plotting\n  liveUpdateHandler = e => {\n    if (e.target.checked) {\n      this.setState({\n        liveMode: true,\n        endTime: null\n      });\n      this.intervalHandler();\n    } else {\n      clearTimeout(this.timeout);\n      this.setState({\n        liveMode: false\n      });\n      this.endTimeChangeHandler(moment());\n    }\n  };\n\n  intervalHandler = async () => {\n    await this.updateMetrics();\n    if (this.state.liveMode) {\n      this.timeout = setTimeout(this.intervalHandler, 2000);\n    }\n  };\n\n  getDataHandler = async (lastCursor, retval, dataset, handler) => {\n    let req = queryBuilder(\n      this.state.liveMode,\n      this.state.startTime,\n      this.state.endTime,\n      dataset\n    );\n\n    if (lastCursor !== null) req.query.startCursor = lastCursor;\n\n    let response = await fetch(\n      config.datastore.getQueryUrl(),\n      config.datastore.generatePayload(this.props.token, JSON.stringify(req))\n    );\n\n    let json = await response.json();\n\n    try {\n      if (\"entityResults\" in json.batch) {\n        json.batch.entityResults.forEach(d => {\n          handler(retval, d);\n        });\n      }\n\n      // There are still results remaining\n      if (json.batch.moreResults === \"NOT_FINISHED\") {\n        return await this.getDataHandler(\n          json.batch.endCursor,\n          retval,\n          dataset,\n          handler\n        );\n      }\n    } catch (error) {\n      console.log(error);\n    }\n    return retval;\n  };\n\n  getData = async () => {\n    let newData = {};\n\n    for (let dataset of config.datastore.datasets[this.state.car]) {\n      let data = await this.getDataHandler(\n        null,\n        [],\n        dataset.id,\n        dataset.handler\n      );\n      newData[dataset.id] = dataset.parser(dataset.label, dataset.id, data);\n    }\n\n    return newData;\n  };\n\n  updateMetrics = async () => {\n    this.setState({\n      updating: true\n    });\n\n    let newData = await this.getData();\n\n    this.setState({\n      updating: false,\n      data: newData\n    });\n  };\n\n  changeCar = e => {\n    this.setState({\n      car: e.target.id\n    });\n  };\n\n  populateCars = () => {\n    let ret = [];\n    for (let car in config.datastore.datasets) {\n      ret.push(\n        <a\n          className=\"dropdown-item\"\n          id={car}\n          key={car}\n          onClick={this.changeCar}\n        >\n          {car}\n        </a>\n      );\n    }\n    return ret;\n  };\n\n  render = () => {\n    return (\n      <div>\n        <div className=\"container notification\">\n          <div className=\"columns\">\n            <div className=\"column is-narrow\">\n              <DayRange\n                startTime={this.state.startTime}\n                endTime={this.state.endTime}\n                onChangeStart={this.startTimeChangeHandler}\n                onChangeEnd={this.endTimeChangeHandler}\n              />\n            </div>\n            <div className=\"column\">\n              <div className=\"columns is-mobile is-vcentered is-multiline\">\n                <div className=\"toggle column is-narrow\">\n                  <Toggle\n                    defaultChecked={this.state.liveMode}\n                    onChange={this.liveUpdateHandler}\n                  />\n                </div>\n                <div className=\"column is-narrow\">\n                  <Button\n                    liveMode={this.state.liveMode}\n                    getDataHandler={this.updateMetrics}\n                    updating={this.state.updating}\n                  />\n                </div>\n                <div className=\"column is-narrow\">\n                  <div className=\"dropdown is-small is-hoverable\">\n                    <div className=\"dropdown-trigger\">\n                      <button className=\"button\" controls=\"dropdown-menu\">\n                        <span>{this.state.car}</span>\n                        <span className=\"icon is-small\">\n                          <i className=\"fas fa-angle-down\"></i>\n                        </span>\n                      </button>\n                    </div>\n                    <div\n                      className=\"dropdown-menu\"\n                      id=\"dropdown-menu\"\n                      role=\"menu\"\n                    >\n                      <div className=\"dropdown-content\">\n                        {this.populateCars()}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"container notification\">\n          <div className=\"columns is-desktop is-multiline\">\n            {config.datastore.datasets[this.state.car].map((dataset, index) => {\n              return dataset.element(this.state.data[dataset.id]);\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  };\n}\n","import config from \"./config/config.js\";\nimport GoogleLogin from \"react-google-login\";\nimport Container from \"./components/Container.js\";\nimport React from \"react\";\nimport \"./css/index.css\";\nimport \"bulma/css/bulma.css\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      infoOn: true,\n      loggedOn: false,\n      token: undefined\n    };\n  }\n\n  oauthSuccess = response => {\n    this.setState({\n      loggedOn: true,\n      token: response.accessToken\n    });\n  };\n\n  oauthFailure = response => {\n    console.log(response, \"Oauth Failed.\");\n  };\n\n  infoHide = () => {\n    this.setState({\n      infoOn: false\n    });\n  };\n\n  render = () => {\n    const headerInfo = (\n      <div className=\"container\">\n        <div className=\"notification is-info\">\n          Welcome! If it's your first time here, the toggle sets whether the\n          data is updated live. Otherwise, you can grab specific data by\n          selecting your time range, then pressing \"Update\". You may encounter\n          errors if you're not authorized to access the datastore. You can close\n          this message on the top right.\n          <button onClick={this.infoHide} className=\"delete\"></button>\n        </div>\n      </div>\n    );\n\n    const headerLogin = (\n      <div className=\"container notification is-link floater\">\n        To get started, log in to generate an OAuth token.\n      </div>\n    );\n\n    return this.state.loggedOn ? (\n      <div>\n        {this.state.infoOn ? headerInfo : undefined}\n        <Container token={this.state.token} />\n      </div>\n    ) : (\n      <div>\n        {headerLogin}\n        <div className=\"login\">\n          <GoogleLogin\n            clientId={config.oauth.clientId}\n            scope=\"profile email https://www.googleapis.com/auth/datastore\"\n            buttonText=\"Login\"\n            onSuccess={this.oauthSuccess}\n            onFailure={this.oauthFailure}\n          />\n        </div>\n      </div>\n    );\n  };\n}\n","import App from \"./App.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}