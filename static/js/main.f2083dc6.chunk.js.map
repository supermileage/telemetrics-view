{"version":3,"sources":["helpers/builders.js","components/Graph.js","components/MapContainer.js","config/config.js","config/datasets.js","components/Toggle.js","components/Button.js","components/DayRange.js","components/Container.js","App.js","index.js"],"names":["chartBuilder","label","id","data","datasets","spanGaps","showLine","yAxisID","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","Graph","render","props","options","React","Component","MapContainer","clearFeature","feature","features","getSource","getFeatures","forEach","feat","removeFeature","formatCoordinate","coord","proj","lng","lat","componentDidMount","map","ol","view","center","config","defaults","zoom","layers","layer","source","target","setState","loaded","shouldComponentUpdate","nextProps","nextState","length","JSON","stringify","componentWillUnmount","centerMap","state","getView","setCenter","drawLineOnMap","lines","geometry","geom","e","name","setStyle","style","stroke","width","addLayer","drawMarkersOnMap","markers","datastore","projectId","getQueryUrl","this","generatePayload","token","body","method","headers","Authorization","Accept","Urban","handler","retval","d","retVals","entity","properties","stringValue","split","elem","y","parseFloat","x","moment","recorded_at","unix","push","NaN","parser","element","className","key","animation","duration","scales","xAxes","gridLines","display","type","distribution","scaleLabel","labelString","yAxes","position","NMEASeq","parseInt","Proto","indexOf","timestamp","oauth","clientId","refreshInterval","Toggle","onChange","checked","defaultChecked","htmlFor","Button","liveMode","updating","onClick","getDataHandler","disabled","DayRange","onChangeStart","value","startTime","onChangeEnd","inputProps","endTime","Container","document","addEventListener","matches","dropdownOpen","setDropdownState","dropState","startTimeChangeHandler","time","endTimeChangeHandler","liveUpdateHandler","intervalHandler","clearTimeout","timeout","a","async","updateMetrics","setTimeout","lastCursor","dataset","req","query","filter","compositeFilter","filters","propertyFilter","op","property","toISOString","kind","projection","startCursor","fetch","response","json","batch","entityResults","moreResults","endCursor","console","log","getData","newData","car","changeCar","populateCars","ret","controls","role","index","App","oauthSuccess","loggedOn","accessToken","oauthFailure","infoHide","infoOn","headerInfo","headerLogin","undefined","scope","buttonText","onSuccess","onFailure","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.f2083dc6.chunk.js","sourcesContent":["export const chartBuilder = (label, id, data) => {\n  return {\n    datasets: [\n      {\n        spanGaps: false,\n        showLine: true,\n        label: label,\n        yAxisID: id,\n        fill: true,\n        lineTension: 0.1,\n        backgroundColor: \"rgba(75,192,192,0.4)\",\n        borderColor: \"rgba(75,192,192,1)\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgba(75,192,192,1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: data\n      }\n    ]\n  };\n};\n\nexport const queryBuilder = (liveMode, startTime, endTime, id) => {\n  return liveMode\n    ? {\n        query: {\n          filter: {\n            compositeFilter: {\n              filters: [\n                {\n                  propertyFilter: {\n                    op: \"GREATER_THAN_OR_EQUAL\",\n                    property: {\n                      name: \"recorded_at\"\n                    },\n                    value: {\n                      stringValue: startTime.toISOString()\n                    }\n                  }\n                },\n                {\n                  propertyFilter: {\n                    op: \"EQUAL\",\n                    property: {\n                      name: \"event\"\n                    },\n                    value: {\n                      stringValue: id\n                    }\n                  }\n                }\n              ],\n              op: \"AND\"\n            }\n          },\n          kind: [\n            {\n              name: \"ParticleEvent\"\n            }\n          ],\n          projection: [\n            {\n              property: {\n                name: \"data\"\n              }\n            },\n            {\n              property: {\n                name: \"recorded_at\"\n              }\n            }\n          ]\n        }\n      }\n    : {\n        query: {\n          filter: {\n            compositeFilter: {\n              filters: [\n                {\n                  propertyFilter: {\n                    op: \"GREATER_THAN_OR_EQUAL\",\n                    property: {\n                      name: \"recorded_at\"\n                    },\n                    value: {\n                      stringValue: startTime.toISOString()\n                    }\n                  }\n                },\n                {\n                  propertyFilter: {\n                    op: \"LESS_THAN_OR_EQUAL\",\n                    property: {\n                      name: \"recorded_at\"\n                    },\n                    value: {\n                      stringValue: endTime.toISOString()\n                    }\n                  }\n                },\n                {\n                  propertyFilter: {\n                    op: \"EQUAL\",\n                    property: {\n                      name: \"event\"\n                    },\n                    value: {\n                      stringValue: id\n                    }\n                  }\n                }\n              ],\n              op: \"AND\"\n            }\n          },\n          kind: [\n            {\n              name: \"ParticleEvent\"\n            }\n          ],\n          projection: [\n            {\n              property: {\n                name: \"data\"\n              }\n            },\n            {\n              property: {\n                name: \"recorded_at\"\n              }\n            }\n          ]\n        }\n      };\n};\n","import { Scatter } from \"react-chartjs-2\";\nimport React from \"react\";\n\n/**\n * Component that holds our graph object.\n */\nexport default class Graph extends React.Component {\n  render = () => {\n    return (\n      <div>\n        <Scatter data={this.props.data} options={this.props.options} />\n      </div>\n    );\n  };\n}\n","import React from \"react\";\nimport config from \"../config/config.js\";\n\nimport * as ol from \"ol\";\nimport * as layer from \"ol/layer\";\nimport * as proj from \"ol/proj\";\nimport * as geom from \"ol/geom\";\nimport * as style from \"ol/style\";\nimport * as source from \"ol/source\";\n/**\n * Component that holds our Google map.\n */\nexport default class MapContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.features = {};\n    this.state = {\n      map: null,\n      loaded: false\n    };\n  }\n\n  clearFeature = feature => {\n    this.features[feature]\n      .getSource()\n      .getFeatures()\n      .forEach(feat => this.features[feature].getSource().removeFeature(feat));\n  };\n\n  formatCoordinate = coord => {\n    return proj.fromLonLat([coord.lng, coord.lat]);\n  };\n\n  componentDidMount = () => {\n    let map = new ol.Map({\n      view: new ol.View({\n        center: this.formatCoordinate(config.map.defaults.center),\n        zoom: config.map.defaults.zoom\n      }),\n      layers: [\n        new layer.Tile({\n          source: new source.OSM()\n        })\n      ],\n      target: \"map\"\n    });\n    this.setState({\n      map: map,\n      loaded: true\n    });\n  };\n\n  shouldComponentUpdate = (nextProps, nextState) => {\n    if (!this.props.data) {\n      return true;\n    }\n    if (nextProps.data && this.props.data.length === nextProps.data.length) {\n      if (JSON.stringify(this.props.data) === JSON.stringify(nextProps.data)) {\n        return false;\n      } else {\n        return true;\n      }\n    } else {\n      return true;\n    }\n  };\n\n  componentWillUnmount = () => {\n    this.features = {};\n    this.setState({\n      map: null,\n      loaded: false\n    });\n  };\n\n  centerMap = () => {\n    if (this.props.data && this.props.data.length > 0) {\n      this.state.map\n        .getView()\n        .setCenter(\n          this.formatCoordinate(this.props.data[this.props.data.length - 1])\n        );\n    }\n  }\n\n  drawLineOnMap = () => {\n    if (this.props.data && this.props.data.length > 0) {\n      if (this.features.lines) {\n        this.clearFeature(\"lines\");\n      }\n      let feature = new ol.Feature({\n        geometry: new geom.LineString(\n          this.props.data.map(e => this.formatCoordinate(e))\n        ),\n        name: \"lines\"\n      });\n      this.features.lines = new layer.Vector({\n        source: new source.Vector({\n          features: [feature]\n        })\n      });\n      feature.setStyle(\n        new style.Style({ stroke: new style.Stroke({ width: 4 }) })\n      );\n      this.state.map.addLayer(this.features.lines);\n    } else {\n      // Clear the map property from the line\n      this.clearFeature(\"lines\");\n    }\n  };\n\n  drawMarkersOnMap = () => {\n    if (this.props.data && this.props.data.length > 0) {\n      let feature = new ol.Feature({\n        geometry: new geom.MultiPoint(\n          this.props.data.map(e => this.formatCoordinate(e))\n        ),\n        name: \"markers\"\n      });\n      this.features.markers = new layer.Vector({\n        source: new source.Vector({\n          features: [feature]\n        })\n      });\n      this.state.map.addLayer(this.features.markers);\n    } else {\n      this.clearFeature(\"markers\");\n    }\n  };\n\n  render = () => {\n    if (this.state.loaded) {\n      this.drawLineOnMap();\n      this.drawMarkersOnMap();\n      this.centerMap();\n    }\n    return <div id=\"map\"></div>;\n  };\n}\n","import datasets from \"./datasets.js\";\n\nlet config = {\n  datastore: {\n    // https://cloud.google.com/datastore/docs/reference/data/rest/v1/projects/runQuery\n    projectId: \"supermileage-telemetry-266511\",\n    getQueryUrl: function() {\n      return (\n        \"https://datastore.googleapis.com/v1/projects/\" +\n        this.projectId +\n        \":runQuery?alt=json\"\n      );\n    },\n    generatePayload: (token, body) => {\n      return {\n        method: \"POST\",\n        headers: {\n          Authorization: \"Bearer \" + token,\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: body\n      };\n    },\n    datasets: datasets\n  },\n  oauth: {\n    clientId:\n      \"929098184548-qq0n3oj40b7s2qbk8nmjm9cn5c6bs15l.apps.googleusercontent.com\"\n  },\n  map: {\n    defaults: {\n      // Vancouver\n      center: { lat: 49.267941, lng: -123.24736 },\n      zoom: 12\n    }\n  },\n  refreshInterval: 8000\n};\n\nexport default config;","import moment from \"moment\";\nimport { chartBuilder } from \"../helpers/builders.js\";\nimport React from \"react\";\nimport Graph from \"../components/Graph.js\";\nimport MapContainer from \"../components/MapContainer.js\";\n\nlet datasets = {\n  Urban: [\n    {\n      label: \"Temperature\",\n      id: \"Temperature\",\n      handler: function(retval, d) {\n        let retVals = d.entity.properties.data.stringValue.split(\" \");\n        let elem = {};\n        elem.y = parseFloat(retVals[0]);\n        elem.x = moment(d.entity.properties.recorded_at.stringValue);\n\n        // Check if the last element was greater than 10 minutes ago, we disjoint it then\n        if (\n          retval.length > 0 &&\n          elem.x.unix() - moment(retval[retval.length - 1].x).unix() > 600\n        ) {\n          retval.push({\n            y: NaN,\n            x: elem.x\n          });\n        }\n        retval.push(elem);\n      },\n      parser: function(label, id, data) {\n        return chartBuilder(label, id, data);\n      },\n      element: function(data) {\n        return (\n          <div className=\"column is-half-desktop\" key={this.id}>\n            <div className=\"box\">\n              <Graph data={data || {}} options={this.options} />\n            </div>\n          </div>\n        );\n      },\n      options: {\n        animation: {\n          duration: 500\n        },\n        scales: {\n          xAxes: [\n            {\n              gridLines: {\n                display: false\n              },\n              type: \"time\",\n              distribution: \"linear\", // Distances can vary, based on time\n              scaleLabel: {\n                display: true,\n                labelString: \"Time\"\n              }\n            }\n          ],\n          yAxes: [\n            {\n              id: \"Temperature\",\n              position: \"left\",\n              gridLines: {\n                display: false\n              },\n              scaleLabel: {\n                display: true,\n                labelString: \"Temperature (C)\"\n              }\n            }\n          ]\n        }\n      }\n    },\n    {\n      label: \"Power\",\n      id: \"Power\",\n      handler: function(retval, d) {\n        let elem = {};\n        elem.y = parseFloat(d.entity.properties.data.stringValue);\n        elem.x = moment(d.entity.properties.recorded_at.stringValue);\n\n        // Check if the last element was greater than 10 minutes ago, we disjoint it then\n        if (\n          retval.length > 0 &&\n          elem.x.unix() - moment(retval[retval.length - 1].x).unix() > 600\n        ) {\n          retval.push({\n            y: NaN,\n            x: elem.x\n          });\n        }\n        retval.push(elem);\n      },\n      parser: function(label, id, data) {\n        return chartBuilder(label, id, data);\n      },\n      element: function(data) {\n        return (\n          <div className=\"column is-half-desktop\" key={this.id}>\n            <div className=\"box\">\n              <Graph data={data || {}} options={this.options} />\n            </div>\n          </div>\n        );\n      },\n      options: {\n        animation: {\n          duration: 500\n        },\n        scales: {\n          xAxes: [\n            {\n              gridLines: {\n                display: false\n              },\n              type: \"time\",\n              distribution: \"linear\", // Distances can vary, based on time\n              scaleLabel: {\n                display: true,\n                labelString: \"Time\"\n              }\n            }\n          ],\n          yAxes: [\n            {\n              id: \"Power\",\n              position: \"left\",\n              gridLines: {\n                display: false\n              },\n              scaleLabel: {\n                display: true,\n                labelString: \"State of Charge (%)\"\n              }\n            }\n          ]\n        }\n      }\n    },\n    {\n      label: \"Location\",\n      id: \"Location\",\n      handler: function(retval, d) {\n        let NMEASeq = d.entity.properties.data.stringValue.split(\",\");\n        let lat =\n          parseInt(parseInt(NMEASeq[3]) / 100) +\n          parseFloat(parseFloat(NMEASeq[3]) % 100) / 60;\n        let lng =\n          parseInt(parseInt(NMEASeq[5]) / 100) +\n          parseFloat(parseFloat(NMEASeq[5]) % 100) / 60;\n        lat = NMEASeq[4] === \"S\" ? -lat : lat;\n        lng = NMEASeq[6] === \"W\" ? -lng : lng;\n        let elem = { lat, lng };\n        retval.push(elem);\n      },\n      parser: function(label, id, data) {\n        return data;\n      },\n      element: function(data) {\n        return (\n          <div className=\"column is-full\" key={this.id}>\n            <div className=\"card\">\n              <MapContainer data={data || []} />\n            </div>\n          </div>\n        );\n      }\n    }\n  ],\n  Proto: [\n    {\n      label: \"Speed\",\n      id: \"PROTO-Speed\",\n      handler: function(retval, d) {\n        let data = d.entity.properties.data.stringValue.split(\",\");\n        \n        let elem = {};\n        elem.y = parseFloat(data[data.indexOf(\"K\") - 1]);\n        elem.x = moment(d.entity.properties.recorded_at.stringValue);\n\n        // Check if the last element was greater than 10 minutes ago, we disjoint it then\n        if (\n          retval.length > 0 &&\n          elem.x.unix() - moment(retval[retval.length - 1].x).unix() > 600\n        ) {\n          retval.push({\n            y: NaN,\n            x: elem.x\n          });\n        }\n        retval.push(elem);\n      },\n      parser: function(label, id, data) {\n        return chartBuilder(label, id, data);\n      },\n      element: function(data) {\n        return (\n          <div className=\"column\" key={this.id}>\n            <div className=\"box\">\n              <Graph data={data || {}} options={this.options} />\n            </div>\n          </div>\n        );\n      },\n      options: {\n        animation: {\n          duration: 500\n        },\n        scales: {\n          xAxes: [\n            {\n              gridLines: {\n                display: false\n              },\n              type: \"time\",\n              distribution: \"linear\", // Distances can vary, based on time\n              scaleLabel: {\n                display: true,\n                labelString: \"Time\"\n              }\n            }\n          ],\n          yAxes: [\n            {\n              id: \"PROTO-Speed\",\n              position: \"left\",\n              gridLines: {\n                display: false\n              },\n              scaleLabel: {\n                display: true,\n                labelString: \"km/h\"\n              }\n            }\n          ]\n        }\n      }\n    },\n    {\n      label: \"Location\",\n      id: \"PROTO-Location\",\n      handler: function(retval, d) {\n        let NMEASeq = d.entity.properties.data.stringValue.split(\",\");\n        let lat =\n          parseInt(parseInt(NMEASeq[3]) / 100) +\n          parseFloat(parseFloat(NMEASeq[3]) % 100) / 60;\n        let lng =\n          parseInt(parseInt(NMEASeq[5]) / 100) +\n          parseFloat(parseFloat(NMEASeq[5]) % 100) / 60;\n        lat = NMEASeq[4] === \"S\" ? -lat : lat;\n        lng = NMEASeq[6] === \"W\" ? -lng : lng;\n        let timestamp = d.entity.properties.recorded_at.stringValue;\n        let elem = { lat, lng, timestamp };\n        retval.push(elem);\n      },\n      parser: function(label, id, data) {\n        return data;\n      },\n      element: function(data) {\n        return (\n          <div className=\"column is-full\" key={this.id}>\n            <div className=\"card\">\n              <MapContainer data={data || []} />\n            </div>\n          </div>\n        );\n      }\n    }\n  ]\n};\n\nexport default datasets;\n","import React from \"react\";\nimport \"bulma-switch/dist/css/bulma-switch.min.css\";\n\nexport default class Toggle extends React.Component {\n  render = () => {\n    return (\n      <div className=\"field\">\n        <input\n          id=\"switch\"\n          className=\"switch is-medium\"\n          type=\"checkbox\"\n          onChange={this.props.onChange}\n          checked={this.props.defaultChecked}\n        />\n        <label htmlFor=\"switch\"></label>\n      </div>\n    );\n  };\n}\n","import React from \"react\";\n\nexport default class Button extends React.Component {\n  render = () => {\n    return this.props.liveMode || this.props.updating ? (\n      <button\n        className=\"button is-info is-loading\"\n        onClick={this.props.getDataHandler}\n        disabled\n      >\n        Update\n      </button>\n    ) : (\n      <button className=\"button is-info\" onClick={this.props.getDataHandler}>\n        Update\n      </button>\n    );\n  };\n}\n","import React from \"react\";\nimport \"../css/datetime.css\";\nimport Datetime from \"react-datetime\";\n\nexport default class DayRange extends React.Component {\n  // Render my pickers; all the state is lifted up into\n  // the parent element, thus all the changes are handled\n  // by props; this element does not have state\n  render = () => {\n    return (\n      <div className=\"columns\">\n        <div className=\"column\">\n          <Datetime\n            className=\"input\"\n            type=\"date\"\n            onChange={this.props.onChangeStart}\n            value={this.props.startTime}\n          />\n        </div>\n        <div className=\"column\">\n          <Datetime\n            className=\"input\"\n            type=\"date\"\n            onChange={this.props.onChangeEnd}\n            inputProps={{\n              disabled: this.props.endTime === null\n            }}\n            value={this.props.endTime === null ? \"Current\" : this.props.endTime}\n          />\n        </div>\n      </div>\n    );\n  };\n}\n","import React from \"react\";\nimport Toggle from \"./Toggle.js\";\nimport Button from \"./Button.js\";\nimport moment from \"moment\";\nimport config from \"../config/config.js\";\nimport { queryBuilder } from \"../helpers/builders.js\";\nimport DayRange from \"./DayRange.js\";\n\nexport default class Container extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startTime: moment(),\n      endTime: moment(),\n      liveMode: false,\n      updating: false,\n      dropdownOpen: false,\n      data: {},\n      car: \"Urban\"\n    };\n  }\n\n  componentDidMount = () => {\n    document.addEventListener(\"click\", e => {\n      if (!e.target.matches(\".dropdown-trigger *\")) {\n        if (this.state.dropdownOpen) {\n          this.setDropdownState(false);\n        }\n      }\n    });\n  };\n\n  setDropdownState = dropState => {\n    this.setState({\n      dropdownOpen: dropState\n    });\n  };\n\n  // Handler functions for our starttime change, which\n  // our dayrange will receieve as a prop\n  startTimeChangeHandler = time => {\n    this.setState({\n      startTime: time\n    });\n  };\n\n  endTimeChangeHandler = time => {\n    this.setState({\n      endTime: time\n    });\n  };\n\n  // Handle the current boolean for \"live\" plotting\n  liveUpdateHandler = e => {\n    if (e.target.checked) {\n      this.setState({\n        liveMode: true,\n        endTime: null\n      });\n      this.intervalHandler();\n    } else {\n      clearTimeout(this.timeout);\n      this.setState({\n        liveMode: false\n      });\n      this.endTimeChangeHandler(moment());\n    }\n  };\n\n  intervalHandler = async () => {\n    await this.updateMetrics();\n    if (this.state.liveMode) {\n      this.timeout = setTimeout(this.intervalHandler, config.refreshInterval);\n    }\n  };\n\n  getDataHandler = async (lastCursor, retval, dataset, handler) => {\n    let req = queryBuilder(\n      this.state.liveMode,\n      this.state.startTime,\n      this.state.endTime,\n      dataset\n    );\n\n    if (lastCursor !== null) req.query.startCursor = lastCursor;\n\n    let response = await fetch(\n      config.datastore.getQueryUrl(),\n      config.datastore.generatePayload(this.props.token, JSON.stringify(req))\n    );\n\n    let json = await response.json();\n\n    try {\n      if (\"entityResults\" in json.batch) {\n        json.batch.entityResults.forEach(d => {\n          handler(retval, d);\n        });\n      }\n\n      // There are still results remaining\n      if (json.batch.moreResults === \"NOT_FINISHED\") {\n        return await this.getDataHandler(\n          json.batch.endCursor,\n          retval,\n          dataset,\n          handler\n        );\n      }\n    } catch (error) {\n      console.log(error);\n    }\n    return retval;\n  };\n\n  getData = async () => {\n    let newData = {};\n\n    for (let dataset of config.datastore.datasets[this.state.car]) {\n      let data = await this.getDataHandler(\n        null,\n        [],\n        dataset.id,\n        dataset.handler\n      );\n      newData[dataset.id] = dataset.parser(dataset.label, dataset.id, data);\n    }\n\n    return newData;\n  };\n\n  updateMetrics = async () => {\n    this.setState({\n      updating: true\n    });\n\n    let newData = await this.getData();\n\n    this.setState({\n      updating: false,\n      data: newData\n    });\n  };\n\n  changeCar = e => {\n    if (e.target.id !== this.state.car) {\n      this.setState({\n      car: e.target.id,\n        data: {}\n      });\n    }\n  };\n\n  populateCars = () => {\n    let ret = [];\n    for (let car in config.datastore.datasets) {\n      ret.push(\n        <a\n          className=\"dropdown-item\"\n          id={car}\n          key={car}\n          onClick={this.changeCar}\n        >\n          {car}\n        </a>\n      );\n    }\n    return ret;\n  };\n\n  render = () => {\n    return (\n      <div>\n        <div className=\"container notification\">\n          <div className=\"columns\">\n            <div className=\"column is-narrow\">\n              <DayRange\n                startTime={this.state.startTime}\n                endTime={this.state.endTime}\n                onChangeStart={this.startTimeChangeHandler}\n                onChangeEnd={this.endTimeChangeHandler}\n              />\n            </div>\n            <div className=\"column\">\n              <div className=\"columns is-mobile is-vcentered is-multiline\">\n                <div className=\"toggle column is-narrow\">\n                  <Toggle\n                    defaultChecked={this.state.liveMode}\n                    onChange={this.liveUpdateHandler}\n                  />\n                </div>\n                <div className=\"column is-narrow\">\n                  <div\n                    className={\n                      \"dropdown\" +\n                      (this.state.dropdownOpen ? \" is-active\" : \"\")\n                    }\n                  >\n                    <div\n                      className=\"dropdown-trigger\"\n                      onClick={() => {\n                        this.setDropdownState(!this.state.dropdownOpen);\n                      }}\n                    >\n                      <button className=\"button\" controls=\"dropdown-menu\">\n                        <span>{this.state.car}</span>\n                        <span className=\"icon is-small\">\n                          <i className=\"fas fa-angle-down\"></i>\n                        </span>\n                      </button>\n                    </div>\n                    <div\n                      className=\"dropdown-menu\"\n                      id=\"dropdown-menu\"\n                      role=\"menu\"\n                    >\n                      <div className=\"dropdown-content\">\n                        {this.populateCars()}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"column is-narrow\">\n                  <Button\n                    liveMode={this.state.liveMode}\n                    getDataHandler={this.updateMetrics}\n                    updating={this.state.updating}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"container\">\n          <div className=\"columns is-desktop is-multiline\">\n            {config.datastore.datasets[this.state.car].map((dataset, index) => {\n              return dataset.element(this.state.data[dataset.id]);\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  };\n}\n","import config from \"./config/config.js\";\nimport GoogleLogin from \"react-google-login\";\nimport Container from \"./components/Container.js\";\nimport React from \"react\";\nimport \"./css/index.css\";\nimport \"bulma/css/bulma.css\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      infoOn: true,\n      loggedOn: false,\n      token: undefined\n    };\n  }\n\n  oauthSuccess = response => {\n    this.setState({\n      loggedOn: true,\n      token: response.accessToken\n    });\n  };\n\n  oauthFailure = response => {\n    console.log(response, \"Oauth Failed.\");\n  };\n\n  infoHide = () => {\n    this.setState({\n      infoOn: false\n    });\n  };\n\n  render = () => {\n    const headerInfo = (\n      <div className=\"container\">\n        <div className=\"notification is-info\">\n          Welcome! If it's your first time here, the toggle sets whether the\n          data is updated live. Otherwise, you can grab specific data by\n          selecting your time range, then pressing \"Update\". You may encounter\n          errors if you're not authorized to access the datastore. You can close\n          this message on the top right.\n          <button onClick={this.infoHide} className=\"delete\"></button>\n        </div>\n      </div>\n    );\n\n    const headerLogin = (\n      <div className=\"container notification is-link floater\">\n        To get started, log in to generate an OAuth token.\n      </div>\n    );\n\n    return this.state.loggedOn ? (\n      <div>\n        {this.state.infoOn ? headerInfo : undefined}\n        <Container token={this.state.token} />\n      </div>\n    ) : (\n      <div>\n        {headerLogin}\n        <div className=\"login\">\n          <GoogleLogin\n            clientId={config.oauth.clientId}\n            scope=\"profile email https://www.googleapis.com/auth/datastore\"\n            buttonText=\"Login\"\n            onSuccess={this.oauthSuccess}\n            onFailure={this.oauthFailure}\n          />\n        </div>\n      </div>\n    );\n  };\n}\n","import App from \"./App.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}