{"version":3,"sources":["constants.js","index.js"],"names":["data","datasets","spanGaps","showLine","label","yAxisID","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","chartOptions","animation","duration","scales","xAxes","gridLines","display","type","distribution","scaleLabel","labelString","yAxes","id","position","request","state","current","query","filter","compositeFilter","filters","propertyFilter","op","property","name","value","stringValue","startTime","toISOString","kind","projection","endTime","shortcuts","moment","subtract","GraphContainer","props","handleChangeStart","time","setState","handleChangeEnd","handleCurrent","e","target","checked","intervalHandler","clearTimeout","timeout","a","getData","console","log","setTimeout","getDataHandler","mode","req","lastCursor","startCursor","fetch","method","headers","token","body","JSON","stringify","then","val","json","batch","vals","entityResults","forEach","d","retVals","entity","properties","split","i","elem","y","parseFloat","x","published_at","length","unix","push","NaN","NMEASeq","lat","parseInt","lng","moreResults","endCursor","error","updating","newData","graph","chartRef","_meta","hidden","slice","coordinates","responseGoogle","response","loggedIn","accessToken","responseFail","buttonProvider","className","onClick","disabled","infoHide","infoOn","getChartRef","ref","header","this","undefined","startVal","endVal","onChangeStart","onChangeEnd","defaultChecked","onChange","clientId","buttonText","onSuccess","onFailure","React","Component","Graph","shouldComponentUpdate","nextProps","render","options","Map","initMap","map","window","google","maps","document","getElementById","center","zoom","loaded","drawLineOnMap","panTo","LatLng","Math","floor","lines","Polyline","path","setMap","setPath","componentWillMount","tag","createElement","async","src","appendChild","DayRange","format","readOnly","ReactDOM"],"mappings":"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","file":"static/js/main.fcfcd2f6.chunk.js","sourcesContent":["import moment from 'moment';\n\nexport const data = {\n    datasets: [\n        {\n            spanGaps: false,\n            showLine: true,\n            label: 'Temperature 1',\n            yAxisID: 'Temperature',\n            fill: true,\n            lineTension: 0.1,\n            backgroundColor: 'rgba(75,192,192,0.4)',\n            borderColor: 'rgba(75,192,192,1)',\n            borderCapStyle: 'butt',\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: 'miter',\n            pointBorderColor: 'rgba(75,192,192,1)',\n            pointBackgroundColor: '#fff',\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: [] // Data to update\n        },\n        {\n            spanGaps: false,\n            showLine: true,\n            label: 'Temperature 2',\n            yAxisID: 'Temperature',\n            fill: true,\n            lineTension: 0.1,\n            backgroundColor: 'rgba(75,192,192,0.4)',\n            borderColor: 'rgba(75,192,192,1)',\n            borderCapStyle: 'butt',\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: 'miter',\n            pointBorderColor: 'rgba(75,192,192,1)',\n            pointBackgroundColor: '#fff',\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: [] // Data to update\n        },\n        {\n            spanGaps: false,\n            showLine: true,\n            label: 'State of Charge',\n            yAxisID: 'SOC',\n            fill: true,\n            lineTension: 0.1,\n            backgroundColor: 'rgba(192,86,75,0.4)',\n            borderColor: 'rgba(192,86,75,1)',\n            borderCapStyle: 'butt',\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: 'miter',\n            pointBorderColor: 'rgba(192,86,75,1)',\n            pointBackgroundColor: '#fff',\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: 'rgba(192,86,75,1)',\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: [] // Data to update\n        }\n    ],\n};\n\nexport const chartOptions = {\n    animation: {\n      duration : 500,\n    },\n    scales : {\n      xAxes: [{\n        gridLines: {\n          display: false,\n        },\n        type: 'time',\n        distribution: 'linear', // Distances can vary, based on time\n        scaleLabel: {\n          display: true,\n          labelString: 'Time'\n        },\n      }],\n      yAxes: [{\n        id: 'Temperature',\n        position: 'left',\n        gridLines: {\n          display: false,\n        },\n        scaleLabel: {\n          display: true,\n          labelString: 'Temperature (C)'\n        },\n        },\n        {\n          id: 'SOC',\n          position: 'right',\n          gridLines: {\n            display: false,\n          },\n          scaleLabel: {\n            display: true,\n            labelString: 'State of Charge (%)'\n          },\n        }\n    ]\n    },\n}\n  \nexport const request = (state, type) => {\nreturn (state.current) ? {\n    query: {\n        filter: {\n            compositeFilter: {\n                filters: [\n                {\n                    propertyFilter: {\n                        op: 'GREATER_THAN_OR_EQUAL',\n                        property: {\n                            name: 'published_at'\n                        },\n                        value: {\n                            stringValue: state.startTime.toISOString()\n                        }\n                    }\n                },\n                {\n                    propertyFilter: {\n                        op: 'EQUAL',\n                        property: {\n                            name: 'event'\n                        },\n                        value: {\n                            stringValue: type\n                        }\n                    }\n                }\n                ],\n                op: \"AND\"\n            }\n        },\n        kind: [\n            {\n                name: 'ParticleEvent'\n            }\n        ],\n        projection: [\n            {\n                property: {\n                    name: 'data'\n                }\n            },\n            {\n                property: {\n                    name: 'published_at'\n                }\n            }\n        ],\n    }\n    } : {\n    query: {\n        filter: {\n            compositeFilter: {\n                filters: [\n                {\n                    propertyFilter: {\n                        op: 'GREATER_THAN_OR_EQUAL',\n                        property: {\n                            name: 'published_at'\n                        },\n                        value: {\n                            stringValue: state.startTime.toISOString()\n                        }\n                    }\n                },\n                {\n                    propertyFilter: {\n                        op: 'LESS_THAN_OR_EQUAL',\n                        property: {\n                            name: 'published_at'\n                        },\n                        value: {\n                            stringValue: state.endTime.toISOString()\n                        }\n                    }\n                },\n                {\n                    propertyFilter: {\n                        op: 'EQUAL',\n                        property: {\n                            name: 'event'\n                        },\n                        value: {\n                            stringValue: type\n                        }\n                    }\n                }\n                ],\n                op: \"AND\"\n            }\n        }\n        ,\n        kind: [\n        {\n            name: \"ParticleEvent\"\n        }\n        ],\n        projection: [\n        {\n            property: {\n            name: \"data\"\n            }\n        },\n        {\n            property: {\n            name: \"published_at\"\n            }\n        }\n        ]\n    }\n}\n};\n\nexport const shortcuts = {\n    'Today': moment(),\n    'Yesterday': moment().subtract(1, 'days'),\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Scatter} from 'react-chartjs-2';\nimport moment from 'moment';\nimport {DatetimePickerTrigger} from 'rc-datetime-picker';\nimport Toggle from 'react-toggle';\nimport GoogleLogin from 'react-google-login';\nimport {data, chartOptions, request, shortcuts} from './constants.js';\nimport './datetime.css';\nimport './toggle.css';\nimport './index.css';\nimport 'bulma/css/bulma.css';\n\n// Our graph container to hold all our objects, and also\n// to store state of our objects\nclass GraphContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.lastCursor = null;\n    this.vals = [[], []];\n    this.chartRef = null;\n    this.state = {\n      startTime: moment(),\n      endTime: moment(),\n      current: false,\n      loggedIn: false,\n      graph: data,\n      updating: false,\n      infoOn: true,\n      coordinates: []\n    }\n  }\n\n  // Handle the start time change\n  handleChangeStart = (time) => {\n    this.setState({\n      startTime: time\n    })\n  }\n\n  // Handle the end time change\n  handleChangeEnd = (time) => {\n    this.setState({\n      endTime: time\n    })\n  }\n\n  // Handle the current boolean for \"live\" plotting\n  handleCurrent = (e) => {\n    let current = e.target.checked;\n    if (current) {\n      this.setState({\n        current: true,\n        endTime: null\n      })\n      this.intervalHandler();\n    } else {\n      clearTimeout(this.timeout);\n      this.setState({\n        current: false\n      })\n      this.handleChangeEnd(moment());\n    }\n  }\n\n  intervalHandler = async () => {\n    await this.getData();\n    console.log(\"get data done, resetting\");\n    if (this.state.current) {\n      this.timeout = setTimeout(this.intervalHandler, 2000);\n    }\n  }\n\n  // POST using OAuth creds to retrieve datastore based on time\n  // Async means it returns an implicit Promise that we will resolve later\n  getDataHandler = async (type, mode) => {\n    // Build our query\n    let req = request(this.state, type);\n\n    // Change our lastCursor value\n    if (this.lastCursor !== null) req.query.startCursor = this.lastCursor;\n    // Call our fetch\n    await fetch('https://datastore.googleapis.com/v1/projects/ubc-supermileage-telemetry-v2:runQuery?prettyPrint=true&alt=json', \n      {\n        method: 'POST',\n        headers: {\n          'Authorization' : 'Bearer ' + this.token,\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(req)}).then(val => val.json().then(e => {\n        // Try safety\n        console.log(e);\n        try {\n          if ('entityResults' in e.batch) {\n            console.log()\n            if (this.lastCursor === null) {\n              this.vals = [[], []];\n            }\n            e.batch.entityResults.forEach(d => {\n              // For a coordinate\n              if (mode === 0) {\n                let retVals = d.entity.properties.data.stringValue.split(\" \");\n                for (let i = 0; i < 2; i++) {\n                  let elem = {};\n                  elem.y = parseFloat(retVals[i]);\n                  elem.x = moment(d.entity.properties.published_at.stringValue);\n                  // Check if the last element was greater than 10 minutes ago\n                  if (this.vals[i].length > 0 && elem.x.unix() \n                        - moment(this.vals[i][this.vals[i].length - 1].x).unix() > 600) {\n                    this.vals[i].push({\n                      y: NaN,\n                      x: elem.x\n                    });\n                  }\n                  this.vals[i].push(elem);\n                }\n              } else {\n                // Convert to lat/long here\n                // Sample NMEA seq \"$GPRMC,033404.000,A,4915.6993,N,12314.9440,W,0.45,107.40,060319,,,A*72\", \n                let NMEASeq = d.entity.properties.data.stringValue.split(',');\n                let lat = parseInt(parseInt(NMEASeq[3]) / 100) + parseFloat(parseFloat(NMEASeq[3]) % 100) / 60;\n                let lng = parseInt(parseInt(NMEASeq[5]) / 100) + parseFloat(parseFloat(NMEASeq[5]) % 100) / 60;\n                lat = (NMEASeq[4] === \"S\") ? -lat : lat;\n                lng = (NMEASeq[6] === \"W\") ? -lng : lng;\n                let elem = {};\n                elem.lat = lat;\n                elem.lng = lng;\n                this.vals[0].push(elem);\n              }\n            });\n          } else {\n            // Clear our values\n            this.vals = [[], []];\n          }\n          if (e.batch.moreResults === \"NOT_FINISHED\") {\n            console.log(\"Not done\");\n            this.lastCursor = e.batch.endCursor;\n            return this.getDataHandler(type, mode);\n          }\n        } catch (error) {\n          console.log(error);\n        }\n        console.log(\"Done\");\n        this.lastCursor = null;\n        return true;\n      }));\n  }\n\n  // Handler for our data, which sets up a promise \n  // that updates once our data has been set up\n  getData = async () => {\n    this.setState({\n      updating: true // Set updating to true so we render notice\n    });\n    let newData = [\n      ...this.state.graph.datasets, // Spread operator allows us to copy things\n    ];\n    // Get velocity\n    if (this.chartRef !== null && (this.chartRef.props.data.datasets[0]._meta[0].hidden !== true\n          || this.chartRef.props.data.datasets[1]._meta[0].hidden !== true)) {\n      await this.getDataHandler('Temperature', 0);\n      newData[0].data = this.vals[0].slice();\n      newData[1].data = this.vals[1].slice();\n    }\n    console.log(\"Temperature values\");\n    console.log(this.vals[0]);\n    console.log(this.vals[1]);\n    // Get power\n    if (this.chartRef !== null && this.chartRef.props.data.datasets[2]._meta[0].hidden !== true) {\n      await this.getDataHandler('Power', 0);\n      // Make it a value that's better to understand\n      for (let i = 0; i < this.vals[0].length; i++) {\n        this.vals[0][i].y /= 1000000;\n      }\n      newData[2].data = this.vals[0].slice();\n    }\n    console.log(\"Battery values\");\n    console.log(this.vals[0]);\n    // Get location\n    await this.getDataHandler('Location', 1);\n    // Parse location here\n    this.setState({\n      graph: {\n        datasets: newData\n      },\n      coordinates: this.vals[0].slice(),\n      updating: false // done updating\n    });\n  }\n\n  // OAuth authorized, do stuff\n  responseGoogle = (response) => {\n    this.setState({\n      loggedIn: true\n    });\n    console.log(response);\n    console.log(\"Success\");\n    this.token = response.accessToken;\n  }\n\n  // OAuth failed, don't do stuff\n  responseFail = (response) => {\n    console.log(response);\n    console.log(\"Failed\");\n  }\n\n  // This code sucks\n  buttonProvider = () => {\n    return (this.state.current) ? (<button \n      className=\"button is-rounded is-info is-small is-loading\" \n      onClick={this.getData} \n      disabled\n    >Update</button>) : (this.state.updating) ? (<button \n      className=\"button is-rounded is-info is-small is-loading\" \n      onClick={this.getData}\n      disabled\n    >Update</button>) : (<button \n      className=\"button is-rounded is-info is-small\" \n      onClick={this.getData} \n    >Update</button>);\n  }\n\n  infoHide = () => {\n    this.setState({\n      infoOn: false\n    });\n  }\n\n  getChartRef = (ref) => {\n    // Get reference to the chart \n    if (this.chartRef === null && ref !== null) {\n      this.chartRef = ref;\n    }\n  }\n\n  // Render element based on logged in state\n  render() {\n    const header = (<div className=\"container\"><div className=\"notification is-info\">Welcome! If it's your first time here,\n    the toggle sets whether the data is updated live. Otherwise, you can grab specific data by selecting \n    your time range, then pressing \"Update\". You may encounter errors if you're not authorized to access the \n    datastore. You can close this message on the top right.\n    <button onClick={this.infoHide} className=\"delete\"></button>\n    </div></div>);\n    if (!this.state.loggedIn) {\n      return (<div>\n      <div className=\"container notification is-link floater\">To get started, log in to generate an OAuth token.</div>\n      <div className=\"login\">\n        <GoogleLogin\n          clientId = \"617338661646-v92ol8vhd4nl44vpntkv4jpjbq5hahmo.apps.googleusercontent.com\"\n          buttonText = \"Login\"\n          onSuccess = {this.responseGoogle}\n          onFailure = {this.responseFail} \n        /></div></div>);\n    } else {\n      return (<div>\n      {(this.state.infoOn) ? header : undefined}\n      <div className=\"container notification\">\n        <div className=\"columns\">\n          <div className=\"column is-narrow\">\n            <DayRange\n              startVal = {this.state.startTime}\n              endVal = {this.state.endTime}\n              onChangeStart = {this.handleChangeStart}\n              onChangeEnd = {this.handleChangeEnd}\n            />\n          </div>\n          <div className=\"column\">\n            <div className=\"columns is-mobile\">\n              <div className=\"toggle column is-narrow\">\n                <Toggle\n                  defaultChecked = {this.state.current}\n                  onChange = {this.handleCurrent}\n                />\n              </div>\n              <div className=\"column is-narrow\">\n                {this.buttonProvider()}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"container notification has-background-white-bis\">\n        <Graph\n          data = {this.state.graph}\n          chartRef = {this.getChartRef}\n        />\n      </div>\n      <div className=\"container notification has-background-white-bis\">\n          <Map\n            coordinates = {this.state.coordinates}\n          />\n      </div>\n      </div>);\n    }\n  }\n}\n\n/**\n * Component that holds our graph object. \n */\nclass Graph extends React.Component {\n  // Flag to check whether the parent is grabbing values,\n  // if it isn't we don't update\n  shouldComponentUpdate = (nextProps) => {\n    return this.props.data !== nextProps.data;\n  }\n\n  render = () => {\n    console.log(\"Rerendering graph\");\n    return (<div>\n      <Scatter \n        data={this.props.data}\n        options={chartOptions}\n        ref={ref => this.props.chartRef(ref)}\n      />\n    </div>);\n  }\n}\n\n/**\n * Component that holds our Google map.\n */\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.lines = null;\n    this.state = {\n      map: null,\n      loaded: false\n    };\n  }\n\n  // Flag so that component doesn't update if we're \n  // currently updating the parent\n  shouldComponentUpdate = (nextProps) => {\n    return this.props.coordinates !== nextProps.coordinates;\n  }\n\n  initMap = () => {\n    let map = new window.google.maps.Map(document.getElementById('map'), {\n      center: {lat: 49.267941, lng: -123.247360},\n      zoom: 12\n    });\n    this.setState({\n      map: map,\n      loaded: true\n    });\n  }\n\n  drawLineOnMap = () => {\n    // If there were valid coordinates, do stuff\n    if (this.props.coordinates.length > 0) {\n      console.log(\"Drawing lines\");\n      // Center around first element\n      this.state.map.panTo(new window.google.maps.LatLng(\n        this.props.coordinates[Math.floor(this.props.coordinates.length / 2)].lat, \n        this.props.coordinates[Math.floor(this.props.coordinates.length / 2)].lng));\n      // If no line initialized, initialize it \n      if (this.lines === null) {\n        // Set the state\n        this.lines = new window.google.maps.Polyline({\n                    path: this.props.coordinates, // This is just an array of coordinates\n                    map: this.state.map\n                  });\n      } else {\n        this.lines.setMap(this.state.map);\n        this.lines.setPath(this.props.coordinates);\n      }\n    } else {\n      // Clear the map property from the line\n      if (this.lines !== null) {\n        this.lines.setMap(null);\n      }\n    }\n  }\n  \n  // Load the Google map script when this component mounts\n  componentWillMount = () => {\n    window.initMap = this.initMap;\n    let tag = document.createElement(\"script\");\n    tag.async = true;\n    // Loads only from specific endpoints, safe to commit\n    tag.src = \"https://maps.googleapis.com/maps/api/js?key=AIzaSyCwcnq2MMCPKEY3hQigIBJn70buQH9py3E&callback=initMap\";\n    // Append the script\n    document.body.appendChild(tag);\n  }\n\n  render = () => {\n    console.log(\"Rerendering map\");\n    if (this.state.loaded) {\n      this.drawLineOnMap();\n    }\n    return (\n      <div id=\"map\"></div>\n    );\n  }\n}\n\n\nclass DayRange extends React.Component {\n  // Render my pickers; all the state is lifted up into \n  // the parent element, thus all the changes are handled\n  // by props; this element does not have state\n  render() {\n    return (<div className=\"columns\">\n        <div className=\"column\">\n          <DatetimePickerTrigger\n            className = \"input is-rounded is-small\"\n            shortcuts = {shortcuts}\n            moment = {this.props.startVal}\n            onChange = {this.props.onChangeStart}>\n            <input type=\"text\" value={this.props.startVal.format('YYYY-MM-DD HH:mm')} readOnly />\n          </DatetimePickerTrigger>\n          </div>\n        <div className=\"column\">\n          <DatetimePickerTrigger\n            className = \"input is-rounded is-small\"\n            shortcuts = {shortcuts}\n            moment = {this.props.endVal}\n            onChange = {this.props.onChangeEnd}\n            disabled = {(this.props.endVal === null) ? true : false}>\n            <input \n              type = \"text\" \n              value = {(this.props.endVal === null) ?\n                \"Current\" : this.props.endVal.format('YYYY-MM-DD HH:mm')} \n              readOnly\n              disabled = {(this.props.endVal === null) ? true : false}\n            />\n          </DatetimePickerTrigger>\n        </div>\n      </div>);\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <GraphContainer />,\n  document.getElementById('root')\n);"],"sourceRoot":""}