{"version":3,"sources":["index.js"],"names":["data","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","request","state","current","query","filter","propertyFilter","op","property","name","value","stringValue","startTime","toISOString","kind","projection","compositeFilter","filters","endTime","shortcuts","Today","moment","Yesterday","subtract","GraphContainer","props","_this","Object","C_Users_lesli_Desktop_react_exploration_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__","this","C_Users_lesli_Desktop_react_exploration_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__","C_Users_lesli_Desktop_react_exploration_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__","call","handleChangeStart","time","setState","handleChangeEnd","handleCurrent","e","target","checked","interval","setInterval","getData","clearInterval","getDataHandler","C_Users_lesli_Desktop_react_exploration_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__","C_Users_lesli_Desktop_react_exploration_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default","a","mark","_callee","req","wrap","_context","prev","next","lastCursor","startCursor","fetch","method","headers","Authorization","token","Accept","Content-Type","body","JSON","stringify","then","val","json","batch","x","y","indx","slice","entityResults","forEach","d","push","parseInt","entity","properties","moreResults","endCursor","stop","updating","oldData","graph","newData","C_Users_lesli_Desktop_react_exploration_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","responseGoogle","response","loggedIn","console","log","accessToken","responseFail","buttonInit","react__WEBPACK_IMPORTED_MODULE_8___default","createElement","className","onClick","animations","DayRange","startVal","endVal","onChangeStart","onChangeEnd","react_toggle__WEBPACK_IMPORTED_MODULE_13___default","defaultChecked","onChange","Graph","react_google_login__WEBPACK_IMPORTED_MODULE_14___default","clientId","buttonText","onSuccess","onFailure","React","Component","render","react_chartjs_2__WEBPACK_IMPORTED_MODULE_10__","_this2","options","animation","duration","rc_datetime_picker__WEBPACK_IMPORTED_MODULE_12__","type","format","readOnly","disabled","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.f73425e0.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Line} from 'react-chartjs-2';\r\nimport moment from 'moment';\r\nimport {DatetimePickerTrigger} from 'rc-datetime-picker';\r\nimport Toggle from 'react-toggle';\r\nimport GoogleLogin from 'react-google-login';\r\nimport \"./datetime.css\";\r\nimport \"./toggle.css\";\r\nimport './index.css';\r\n\r\nconst data = {\r\n  labels: [], // Labels to update\r\n  datasets: [\r\n    {\r\n      label: 'Datapoints',\r\n      fill: true,\r\n      lineTension: 0.1,\r\n      backgroundColor: 'rgba(75,192,192,0.4)',\r\n      borderColor: 'rgba(75,192,192,1)',\r\n      borderCapStyle: 'butt',\r\n      borderDash: [],\r\n      borderDashOffset: 0.0,\r\n      borderJoinStyle: 'miter',\r\n      pointBorderColor: 'rgba(75,192,192,1)',\r\n      pointBackgroundColor: '#fff',\r\n      pointBorderWidth: 1,\r\n      pointHoverRadius: 5,\r\n      pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n      pointHoverBorderWidth: 2,\r\n      pointRadius: 1,\r\n      pointHitRadius: 10,\r\n      data: [] // Data to update\r\n    }\r\n  ],\r\n};\r\n\r\nconst request = (state) => {\r\n  return (state.current) ? {\r\n    query: {\r\n      filter: {\r\n        propertyFilter: {\r\n          op: \"GREATER_THAN_OR_EQUAL\",\r\n          property: {\r\n            name: \"published_at\"\r\n          },\r\n          value: {\r\n            stringValue: state.startTime.toISOString()\r\n          }\r\n        }\r\n      },\r\n      kind: [\r\n        {\r\n          name: \"ParticleEvent\"\r\n        }\r\n      ],\r\n      projection: [\r\n        {\r\n          property: {\r\n            name: \"data\"\r\n          }\r\n        },\r\n        {\r\n          property: {\r\n            name: \"published_at\"\r\n          }\r\n        }\r\n      ],\r\n    }\r\n    } : {\r\n      query: {\r\n        filter: {\r\n          compositeFilter: {\r\n            filters: [\r\n              {\r\n                propertyFilter: {\r\n                  op: \"GREATER_THAN_OR_EQUAL\",\r\n                  property: {\r\n                    name: \"published_at\"\r\n                  },\r\n                  value: {\r\n                    stringValue: state.startTime.toISOString()\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                propertyFilter: {\r\n                  op: \"LESS_THAN_OR_EQUAL\",\r\n                  property: {\r\n                    name: \"published_at\"\r\n                  },\r\n                  value: {\r\n                    stringValue: state.endTime.toISOString()\r\n                  }\r\n                }\r\n              }\r\n            ],\r\n            op: \"AND\"\r\n          }\r\n        }\r\n        ,\r\n        kind: [\r\n          {\r\n            name: \"ParticleEvent\"\r\n          }\r\n        ],\r\n        projection: [\r\n          {\r\n            property: {\r\n              name: \"data\"\r\n            }\r\n          },\r\n          {\r\n            property: {\r\n              name: \"published_at\"\r\n            }\r\n          }\r\n        ]\r\n      }\r\n  }\r\n};\r\n\r\nconst shortcuts = {\r\n  'Today': moment(),\r\n  'Yesterday': moment().subtract(1, 'days'),\r\n};\r\n\r\n// Our graph container to hold all our objects, and also\r\n// to store state of our objects\r\nclass GraphContainer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.lastCursor = null;\r\n    this.x = [];\r\n    this.y = [];\r\n    this.indx = 0;\r\n    this.state = {\r\n      startTime: moment(),\r\n      endTime: moment(),\r\n      current: false,\r\n      loggedIn: false,\r\n      graph: data,\r\n      animations: true,\r\n      updating: false\r\n    }\r\n  }\r\n\r\n  // Handle the start time change\r\n  handleChangeStart = (time) => {\r\n    this.setState({\r\n      startTime: time\r\n    })\r\n  }\r\n\r\n  // Handle the end time change\r\n  handleChangeEnd = (time) => {\r\n    this.setState({\r\n      endTime: time\r\n    })\r\n  }\r\n\r\n  // Handle the current boolean for \"live\" plotting\r\n  handleCurrent = (e) => {\r\n    let current = e.target.checked;\r\n    if (current) {\r\n      this.setState({\r\n        current: true,\r\n        endTime: null\r\n      })\r\n      this.interval = setInterval(() => this.getData(), 1500);\r\n    } else {\r\n      this.setState({\r\n        current: false\r\n      })\r\n      clearInterval(this.interval);\r\n      this.handleChangeEnd(moment());\r\n    }\r\n  }\r\n\r\n  // POST using OAuth creds to retrieve datastore based on time\r\n  // Async means it returns an implicit Promise that we will resolve later\r\n  getDataHandler = async () => {\r\n    // Build our query\r\n    let req = request(this.state);\r\n\r\n    // Change our lastCursor value\r\n    if (this.lastCursor !== null) req.query.startCursor = this.lastCursor;\r\n    // Call our fetch\r\n    await fetch('https://datastore.googleapis.com/v1/projects/ubc-supermileage-telemetry-v2:runQuery?prettyPrint=true&alt=json', \r\n      {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization' : 'Bearer ' + this.token,\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(req)}).then(val => val.json().then(e => {\r\n        if ('entityResults' in e.batch) {\r\n          if (this.lastCursor === null) {\r\n            this.x = [];\r\n            this.y = [];\r\n            this.indx = 0;\r\n          } else {\r\n            this.x = this.x.slice();\r\n            this.y = this.y.slice();\r\n          }\r\n          e.batch.entityResults.forEach(d => {\r\n            this.x.push(parseInt(d.entity.properties.data.stringValue));\r\n            this.y.push(this.indx);\r\n            this.indx++;\r\n          });\r\n        }\r\n        if (e.batch.moreResults === \"NOT_FINISHED\") {\r\n          this.lastCursor = e.batch.endCursor;\r\n          return this.getDataHandler();\r\n        } else {\r\n          this.lastCursor = null;\r\n          return true;\r\n        }\r\n      }));\r\n  }\r\n\r\n  // Handler for our data, which sets up a promise \r\n  // that updates once our data has been set up\r\n  getData = () => {\r\n    this.setState({\r\n      updating: true // Set updating to true so we render notice\r\n    })\r\n    this.getDataHandler().then(() => {\r\n      let oldData = this.state.graph.datasets[0];\r\n      let newData = {\r\n      ...oldData, // Spread operator allows us to copy things\r\n      };\r\n      newData.data = this.x;\r\n      this.setState({\r\n        graph: {\r\n          labels: this.y,\r\n          datasets: [newData]\r\n        },\r\n        updating: false // done updating\r\n      });\r\n    });\r\n  }\r\n\r\n  // OAuth authorized, do stuff\r\n  responseGoogle = (response) => {\r\n    this.setState({\r\n      loggedIn: true\r\n    });\r\n    console.log(response);\r\n    console.log(\"Success\");\r\n    this.token = response.accessToken;\r\n  }\r\n\r\n  // OAuth failed, don't do stuff\r\n  responseFail = (response) => {\r\n    console.log(response);\r\n    console.log(\"Failed\");\r\n  }\r\n\r\n  buttonInit = () => {\r\n      return (<span className=\"updateButton\">\r\n        <button onClick={this.getData}>Update</button>\r\n      </span>);\r\n  }\r\n\r\n  // Render element based on logged in state\r\n  render() {\r\n    if (!this.state.loggedIn) {\r\n      return (<div className=\"login\">\r\n        <GoogleLogin\r\n          clientId = \"617338661646-v92ol8vhd4nl44vpntkv4jpjbq5hahmo.apps.googleusercontent.com\"\r\n          buttonText = \"Login\"\r\n          onSuccess = {this.responseGoogle}\r\n          onFailure = {this.responseFail} \r\n        /></div>);\r\n    } else {\r\n      return (<div><div className=\"header\">\r\n        <DayRange \r\n          startVal = {this.state.startTime}\r\n          endVal = {this.state.endTime}\r\n          onChangeStart = {this.handleChangeStart}\r\n          onChangeEnd = {this.handleChangeEnd}\r\n        />\r\n        <label className=\"toggle\">\r\n          <Toggle \r\n            defaultChecked = {this.state.current}\r\n            onChange = {this.handleCurrent}\r\n          />\r\n        </label>\r\n      {\r\n        (this.state.current) ? \r\n        \"\" : this.buttonInit()\r\n      }\r\n      {\r\n        (this.state.updating) ?\r\n        <div className=\"updating\">Updating..</div> : \"\"\r\n      }\r\n      </div>\r\n      <Graph\r\n        data = {this.state.graph}\r\n        animations = {this.state.animations}\r\n      /></div>);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Component that holds our graph object. \r\n */\r\nclass Graph extends React.Component {\r\n  render = () => {\r\n    return (<div>\r\n      <Line \r\n        data = {this.props.data}\r\n        options={{\r\n          animation: (this.props.animations) ? {\r\n            duration : 500,\r\n          } : false\r\n        }}\r\n      />\r\n    </div>);\r\n  }\r\n}\r\n\r\n\r\nclass DayRange extends React.Component {\r\n  // Render my pickers; all the state is lifted up into \r\n  // the parent element, thus all the changes are handled\r\n  // by props; this element does not have state\r\n  render() {\r\n    return (<div className=\"pickers\">\r\n        <DatetimePickerTrigger\r\n          shortcuts = {shortcuts}\r\n          moment = {this.props.startVal}\r\n          onChange = {this.props.onChangeStart}>\r\n          <input type=\"text\" value={this.props.startVal.format('YYYY-MM-DD HH:mm')} readOnly />\r\n        </DatetimePickerTrigger>\r\n        {' - '}\r\n        <DatetimePickerTrigger\r\n          shortcuts = {shortcuts}\r\n          moment = {this.props.endVal}\r\n          onChange = {this.props.onChangeEnd}\r\n          disabled = {(this.props.endVal === null) ? true : false}>\r\n          <input type=\"text\" value={(this.props.endVal === null) ?\r\n            \"Current\" : this.props.endVal.format('YYYY-MM-DD HH:mm')} readOnly />\r\n        </DatetimePickerTrigger>\r\n        </div>);\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <GraphContainer />,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}