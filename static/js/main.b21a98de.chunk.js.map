{"version":3,"sources":["index.js"],"names":["data","datasets","showLine","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","request","state","current","query","filter","propertyFilter","op","property","name","value","stringValue","startTime","toISOString","kind","projection","compositeFilter","filters","endTime","shortcuts","Today","moment","Yesterday","subtract","GraphContainer","props","_this","Object","C_Users_lesli_Desktop_react_exploration_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__","this","C_Users_lesli_Desktop_react_exploration_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__","C_Users_lesli_Desktop_react_exploration_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__","call","handleChangeStart","time","setState","handleChangeEnd","handleCurrent","e","target","checked","intervalHandler","clearTimeout","timeout","getData","then","setTimeout","getDataHandler","C_Users_lesli_Desktop_react_exploration_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__","C_Users_lesli_Desktop_react_exploration_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default","a","mark","_callee","req","wrap","_context","prev","next","lastCursor","startCursor","fetch","method","headers","Authorization","token","Accept","Content-Type","body","JSON","stringify","val","json","console","log","batch","vals","slice","entityResults","forEach","d","elem","y","parseFloat","entity","properties","x","published_at","unix","t","push","moreResults","endCursor","error","stop","Promise","resolve","updating","newData","C_Users_lesli_Desktop_react_exploration_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","graph","responseGoogle","response","loggedIn","accessToken","responseFail","buttonInit","react__WEBPACK_IMPORTED_MODULE_8___default","createElement","className","onClick","animations","DayRange","startVal","endVal","onChangeStart","onChangeEnd","react_toggle__WEBPACK_IMPORTED_MODULE_13___default","defaultChecked","onChange","Graph","react_google_login__WEBPACK_IMPORTED_MODULE_14___default","clientId","buttonText","onSuccess","onFailure","React","Component","render","react_chartjs_2__WEBPACK_IMPORTED_MODULE_10__","_this2","options","animation","duration","scales","xAxes","type","unit","rc_datetime_picker__WEBPACK_IMPORTED_MODULE_12__","format","readOnly","disabled","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.b21a98de.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Scatter} from 'react-chartjs-2';\r\nimport moment from 'moment';\r\nimport {DatetimePickerTrigger} from 'rc-datetime-picker';\r\nimport Toggle from 'react-toggle';\r\nimport GoogleLogin from 'react-google-login';\r\nimport \"./datetime.css\";\r\nimport \"./toggle.css\";\r\nimport './index.css';\r\n\r\nconst data = {\r\n  // labels: ['Scatter'],\r\n  datasets: [\r\n    {\r\n      showLine: true,\r\n      label: 'Datapoints',\r\n      fill: true,\r\n      lineTension: 0.1,\r\n      backgroundColor: 'rgba(75,192,192,0.4)',\r\n      borderColor: 'rgba(75,192,192,1)',\r\n      borderCapStyle: 'butt',\r\n      borderDash: [],\r\n      borderDashOffset: 0.0,\r\n      borderJoinStyle: 'miter',\r\n      pointBorderColor: 'rgba(75,192,192,1)',\r\n      pointBackgroundColor: '#fff',\r\n      pointBorderWidth: 1,\r\n      pointHoverRadius: 5,\r\n      pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n      pointHoverBorderWidth: 2,\r\n      pointRadius: 1,\r\n      pointHitRadius: 10,\r\n      data: [] // Data to update\r\n    }\r\n  ],\r\n};\r\n\r\nconst request = (state) => {\r\n  return (state.current) ? {\r\n    query: {\r\n      filter: {\r\n        propertyFilter: {\r\n          op: \"GREATER_THAN_OR_EQUAL\",\r\n          property: {\r\n            name: \"published_at\"\r\n          },\r\n          value: {\r\n            stringValue: state.startTime.toISOString()\r\n          }\r\n        }\r\n      },\r\n      kind: [\r\n        {\r\n          name: \"ParticleEvent\"\r\n        }\r\n      ],\r\n      projection: [\r\n        {\r\n          property: {\r\n            name: \"data\"\r\n          }\r\n        },\r\n        {\r\n          property: {\r\n            name: \"published_at\"\r\n          }\r\n        }\r\n      ],\r\n    }\r\n    } : {\r\n      query: {\r\n        filter: {\r\n          compositeFilter: {\r\n            filters: [\r\n              {\r\n                propertyFilter: {\r\n                  op: \"GREATER_THAN_OR_EQUAL\",\r\n                  property: {\r\n                    name: \"published_at\"\r\n                  },\r\n                  value: {\r\n                    stringValue: state.startTime.toISOString()\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                propertyFilter: {\r\n                  op: \"LESS_THAN_OR_EQUAL\",\r\n                  property: {\r\n                    name: \"published_at\"\r\n                  },\r\n                  value: {\r\n                    stringValue: state.endTime.toISOString()\r\n                  }\r\n                }\r\n              }\r\n            ],\r\n            op: \"AND\"\r\n          }\r\n        }\r\n        ,\r\n        kind: [\r\n          {\r\n            name: \"ParticleEvent\"\r\n          }\r\n        ],\r\n        projection: [\r\n          {\r\n            property: {\r\n              name: \"data\"\r\n            }\r\n          },\r\n          {\r\n            property: {\r\n              name: \"published_at\"\r\n            }\r\n          }\r\n        ]\r\n      }\r\n  }\r\n};\r\n\r\nconst shortcuts = {\r\n  'Today': moment(),\r\n  'Yesterday': moment().subtract(1, 'days'),\r\n};\r\n\r\n// Our graph container to hold all our objects, and also\r\n// to store state of our objects\r\nclass GraphContainer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.lastCursor = null;\r\n    this.vals = [];\r\n    this.state = {\r\n      startTime: moment(),\r\n      endTime: moment(),\r\n      current: false,\r\n      loggedIn: false,\r\n      graph: data,\r\n      animations: true,\r\n      updating: false\r\n    }\r\n  }\r\n\r\n  // Handle the start time change\r\n  handleChangeStart = (time) => {\r\n    this.setState({\r\n      startTime: time\r\n    })\r\n  }\r\n\r\n  // Handle the end time change\r\n  handleChangeEnd = (time) => {\r\n    this.setState({\r\n      endTime: time\r\n    })\r\n  }\r\n\r\n  // Handle the current boolean for \"live\" plotting\r\n  handleCurrent = (e) => {\r\n    let current = e.target.checked;\r\n    if (current) {\r\n      this.setState({\r\n        current: true,\r\n        endTime: null\r\n      })\r\n      this.intervalHandler();\r\n    } else {\r\n      clearTimeout(this.timeout);\r\n      this.setState({\r\n        current: false\r\n      })\r\n      this.handleChangeEnd(moment());\r\n    }\r\n  }\r\n\r\n  intervalHandler = () => {\r\n    this.getData().then(() => {\r\n      // Run it again, if current is set\r\n      if (this.state.current) {\r\n        this.timeout = setTimeout(this.intervalHandler, 2000);\r\n      }\r\n    });\r\n  }\r\n\r\n  // POST using OAuth creds to retrieve datastore based on time\r\n  // Async means it returns an implicit Promise that we will resolve later\r\n  getDataHandler = async () => {\r\n    // Build our query\r\n    let req = request(this.state);\r\n\r\n    // Change our lastCursor value\r\n    if (this.lastCursor !== null) req.query.startCursor = this.lastCursor;\r\n    // Call our fetch\r\n    await fetch('https://datastore.googleapis.com/v1/projects/ubc-supermileage-telemetry-v2:runQuery?prettyPrint=true&alt=json', \r\n      {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization' : 'Bearer ' + this.token,\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(req)}).then(val => val.json().then(e => {\r\n        // Try safety\r\n        console.log(e);\r\n        try {\r\n          if ('entityResults' in e.batch) {\r\n            console.log()\r\n            if (this.lastCursor === null) {\r\n              this.vals = [];\r\n            } else {\r\n              this.vals = this.vals.slice(); // Return a copy\r\n            }\r\n            e.batch.entityResults.forEach(d => {\r\n              let elem = {};\r\n              elem.y = parseFloat(d.entity.properties.data.stringValue);\r\n              elem.x = moment(d.entity.properties.published_at.stringValue).unix()\r\n                          -this.state.startTime.unix(); // Return value since num\r\n              elem.t = moment(d.entity.properties.published_at.stringValue);\r\n              this.vals.push(elem);\r\n            });\r\n          } else {\r\n            // Clear our values\r\n            this.vals = [];\r\n          }\r\n          if (e.batch.moreResults === \"NOT_FINISHED\") {\r\n            console.log(\"Not done\");\r\n            this.lastCursor = e.batch.endCursor;\r\n            return this.getDataHandler();\r\n          } else {\r\n            console.log(\"Done\");\r\n            console.log(this.state);\r\n            this.lastCursor = null;\r\n            return true;\r\n          }\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      }));\r\n  }\r\n\r\n  // Handler for our data, which sets up a promise \r\n  // that updates once our data has been set up\r\n  getData = () => {\r\n    return new Promise(resolve => {\r\n      this.setState({\r\n        updating: true // Set updating to true so we render notice\r\n      })\r\n      this.getDataHandler().then(() => {\r\n        let newData = {\r\n        ...this.state.graph.datasets[0], // Spread operator allows us to copy things\r\n        data: this.vals\r\n        };\r\n        this.setState({\r\n          graph: {\r\n            datasets: [newData]\r\n          },\r\n          updating: false // done updating\r\n        });\r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n\r\n  // OAuth authorized, do stuff\r\n  responseGoogle = (response) => {\r\n    this.setState({\r\n      loggedIn: true\r\n    });\r\n    console.log(response);\r\n    console.log(\"Success\");\r\n    this.token = response.accessToken;\r\n  }\r\n\r\n  // OAuth failed, don't do stuff\r\n  responseFail = (response) => {\r\n    console.log(response);\r\n    console.log(\"Failed\");\r\n  }\r\n\r\n  buttonInit = () => {\r\n      return (<span className=\"updateButton\">\r\n        <button onClick={this.getData}>Update</button>\r\n      </span>);\r\n  }\r\n\r\n  // Render element based on logged in state\r\n  render() {\r\n    if (!this.state.loggedIn) {\r\n      return (<div className=\"login\">\r\n        <GoogleLogin\r\n          clientId = \"617338661646-v92ol8vhd4nl44vpntkv4jpjbq5hahmo.apps.googleusercontent.com\"\r\n          buttonText = \"Login\"\r\n          onSuccess = {this.responseGoogle}\r\n          onFailure = {this.responseFail} \r\n        /></div>);\r\n    } else {\r\n      return (<div><div className=\"header\">\r\n        <DayRange \r\n          startVal = {this.state.startTime}\r\n          endVal = {this.state.endTime}\r\n          onChangeStart = {this.handleChangeStart}\r\n          onChangeEnd = {this.handleChangeEnd}\r\n        />\r\n        <label className=\"toggle\">\r\n          <Toggle \r\n            defaultChecked = {this.state.current}\r\n            onChange = {this.handleCurrent}\r\n          />\r\n        </label>\r\n      {\r\n        (this.state.current) ? \r\n        \"\" : this.buttonInit()\r\n      }\r\n      {\r\n        (this.state.updating) ?\r\n        <div className=\"updating\">Updating..</div> : \"\"\r\n      }\r\n      </div>\r\n      <Graph\r\n        data = {this.state.graph}\r\n        animations = {this.state.animations}\r\n      /></div>);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Component that holds our graph object. \r\n */\r\nclass Graph extends React.Component {\r\n  render = () => {\r\n    return (<div>\r\n      <Scatter \r\n        data = {this.props.data}\r\n        options={{\r\n          animation: ((this.props.animations) ? {\r\n            duration : 500,\r\n          } : false),\r\n          scales : {\r\n            xAxes: [{\r\n              type: 'time',\r\n              time: {\r\n                unit: 'second'\r\n              }\r\n            }]\r\n          }\r\n        }}\r\n      />\r\n    </div>);\r\n  }\r\n}\r\n\r\n\r\nclass DayRange extends React.Component {\r\n  // Render my pickers; all the state is lifted up into \r\n  // the parent element, thus all the changes are handled\r\n  // by props; this element does not have state\r\n  render() {\r\n    return (<div className=\"pickers\">\r\n        <DatetimePickerTrigger\r\n          shortcuts = {shortcuts}\r\n          moment = {this.props.startVal}\r\n          onChange = {this.props.onChangeStart}>\r\n          <input type=\"text\" value={this.props.startVal.format('YYYY-MM-DD HH:mm')} readOnly />\r\n        </DatetimePickerTrigger>\r\n        {' - '}\r\n        <DatetimePickerTrigger\r\n          shortcuts = {shortcuts}\r\n          moment = {this.props.endVal}\r\n          onChange = {this.props.onChangeEnd}\r\n          disabled = {(this.props.endVal === null) ? true : false}>\r\n          <input \r\n            type = \"text\" \r\n            value = {(this.props.endVal === null) ?\r\n              \"Current\" : this.props.endVal.format('YYYY-MM-DD HH:mm')} \r\n            readOnly\r\n            disabled = {(this.props.endVal === null) ? true : false}\r\n          />\r\n        </DatetimePickerTrigger>\r\n        </div>);\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <GraphContainer />,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}