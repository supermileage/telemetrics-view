{"version":3,"sources":["helpers/builders.js","components/Graph.js","components/Map.js","config/config.js","config/datasets.js","components/Button.js","components/DayRange.js","components/Container.js","App.js","index.js"],"names":["chartBuilder","label","id","data","datasets","spanGaps","showLine","yAxisID","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","queryBuilder","liveMode","startTime","endTime","query","filter","compositeFilter","filters","propertyFilter","op","property","name","value","stringValue","toISOString","kind","projection","Graph","render","props","options","React","Component","Map","initMap","map","window","google","maps","document","getElementById","config","defaults","setState","loaded","drawLineOnMap","length","state","panTo","LatLng","Math","floor","lat","lng","lines","Polyline","path","setMap","setPath","componentWillMount","tag","createElement","async","src","getSrcUrl","body","appendChild","datastore","projectId","getQueryUrl","this","generatePayload","token","method","headers","Authorization","Accept","handler","retval","d","retVals","entity","properties","split","elem","y","parseFloat","x","moment","published_at","unix","push","NaN","parser","element","animation","duration","scales","xAxes","gridLines","display","type","distribution","scaleLabel","labelString","yAxes","position","NMEASeq","parseInt","oauth","clientId","apiKey","center","zoom","Button","updating","className","onClick","getDataHandler","disabled","DayRange","shortcuts","Today","Yesterday","subtract","onChange","onChangeStart","format","readOnly","onChangeEnd","Container","startTimeChangeHandler","time","endTimeChangeHandler","liveUpdateHandler","e","target","checked","intervalHandler","clearTimeout","timeout","a","updateMetrics","setTimeout","lastCursor","dataset","req","startCursor","fetch","JSON","stringify","response","json","batch","entityResults","forEach","moreResults","endCursor","console","log","getData","newData","defaultChecked","index","key","App","oauthSuccess","loggedOn","accessToken","oauthFailure","infoHide","infoOn","headerInfo","headerLogin","undefined","buttonText","onSuccess","onFailure","ReactDOM"],"mappings":"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","file":"static/js/main.992c9544.chunk.js","sourcesContent":["export const chartBuilder = (label, id, data) => {\n  return {\n    datasets: [\n      {\n        spanGaps: false,\n        showLine: true,\n        label: label,\n        yAxisID: id,\n        fill: true,\n        lineTension: 0.1,\n        backgroundColor: \"rgba(75,192,192,0.4)\",\n        borderColor: \"rgba(75,192,192,1)\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgba(75,192,192,1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: data\n      }\n    ]\n  };\n};\n\nexport const queryBuilder = (liveMode, startTime, endTime, id) => {\n  return liveMode\n    ? {\n        query: {\n          filter: {\n            compositeFilter: {\n              filters: [\n                {\n                  propertyFilter: {\n                    op: \"GREATER_THAN_OR_EQUAL\",\n                    property: {\n                      name: \"published_at\"\n                    },\n                    value: {\n                      stringValue: startTime.toISOString()\n                    }\n                  }\n                },\n                {\n                  propertyFilter: {\n                    op: \"EQUAL\",\n                    property: {\n                      name: \"event\"\n                    },\n                    value: {\n                      stringValue: id\n                    }\n                  }\n                }\n              ],\n              op: \"AND\"\n            }\n          },\n          kind: [\n            {\n              name: \"ParticleEvent\"\n            }\n          ],\n          projection: [\n            {\n              property: {\n                name: \"data\"\n              }\n            },\n            {\n              property: {\n                name: \"published_at\"\n              }\n            }\n          ]\n        }\n      }\n    : {\n        query: {\n          filter: {\n            compositeFilter: {\n              filters: [\n                {\n                  propertyFilter: {\n                    op: \"GREATER_THAN_OR_EQUAL\",\n                    property: {\n                      name: \"published_at\"\n                    },\n                    value: {\n                      stringValue: startTime.toISOString()\n                    }\n                  }\n                },\n                {\n                  propertyFilter: {\n                    op: \"LESS_THAN_OR_EQUAL\",\n                    property: {\n                      name: \"published_at\"\n                    },\n                    value: {\n                      stringValue: endTime.toISOString()\n                    }\n                  }\n                },\n                {\n                  propertyFilter: {\n                    op: \"EQUAL\",\n                    property: {\n                      name: \"event\"\n                    },\n                    value: {\n                      stringValue: id\n                    }\n                  }\n                }\n              ],\n              op: \"AND\"\n            }\n          },\n          kind: [\n            {\n              name: \"ParticleEvent\"\n            }\n          ],\n          projection: [\n            {\n              property: {\n                name: \"data\"\n              }\n            },\n            {\n              property: {\n                name: \"published_at\"\n              }\n            }\n          ]\n        }\n      };\n};\n","import { Scatter } from \"react-chartjs-2\";\nimport React from \"react\";\n\n/**\n * Component that holds our graph object.\n */\nexport default class Graph extends React.Component {\n  render = () => {\n    return (\n      <div>\n        <Scatter data={this.props.data} options={this.props.options} />\n      </div>\n    );\n  };\n}\n","import React from \"react\";\nimport config from \"../config/config.js\";\n\n/**\n * Component that holds our Google map.\n */\nexport default class Map extends React.Component {\n    constructor(props) {\n      super(props);\n      this.lines = null;\n      this.state = {\n        map: null,\n        loaded: false\n      };\n    }\n  \n    initMap = () => {\n      let map = new window.google.maps.Map(document.getElementById('map'), \n        config.map.defaults);\n      this.setState({\n        map: map,\n        loaded: true\n      });\n    }\n  \n    drawLineOnMap = () => {\n      // If there were valid coordinates, do stuff\n      if (this.props.data && this.props.data.length > 0) {\n        // Center around first element\n        this.state.map.panTo(new window.google.maps.LatLng(\n          this.props.data[Math.floor(this.props.data.length / 2)].lat, \n          this.props.data[Math.floor(this.props.data.length / 2)].lng));\n        // If no line initialized, initialize it \n        if (this.lines === null) {\n          // Set the state\n          this.lines = new window.google.maps.Polyline({\n                      path: this.props.data, // This is just an array of coordinates\n                      map: this.state.map\n                    });\n        } else {\n          this.lines.setMap(this.state.map);\n          this.lines.setPath(this.props.data);\n        }\n      } else {\n        // Clear the map property from the line\n        if (this.lines !== null) {\n          this.lines.setMap(null);\n        }\n      }\n    }\n    \n    // Load the Google map script when this component mounts\n    componentWillMount = () => {\n      window.initMap = this.initMap;\n      let tag = document.createElement(\"script\");\n      tag.async = true;\n      // Loads only from specific endpoints, safe to commit\n      tag.src = config.map.getSrcUrl();\n      // Append the script\n      document.body.appendChild(tag);\n    }\n  \n    render = () => {\n      if (this.state.loaded) {\n        this.drawLineOnMap();\n      }\n      return (\n        <div id=\"map\"></div>\n      );\n    }\n  }","import datasets from \"./datasets.js\";\n\nlet config = {\n  datastore: {\n    // https://cloud.google.com/datastore/docs/reference/data/rest/v1/projects/runQuery\n    projectId: \"ubc-supermileage-telemetry-v2\", //\"telemetry-urban-sm\",\n    getQueryUrl: function() {\n      return (\n        \"https://datastore.googleapis.com/v1/projects/\" +\n        this.projectId +\n        \":runQuery?prettyPrint=true&alt=json\"\n      );\n    },\n    generatePayload: (token, body) => {\n      return {\n        method: \"POST\",\n        headers: {\n          Authorization: \"Bearer \" + token,\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: body\n      };\n    },\n    datasets: datasets\n  },\n  oauth: {\n    clientId:\n      \"617338661646-v92ol8vhd4nl44vpntkv4jpjbq5hahmo.apps.googleusercontent.com\" // \"361835365952-be92snngmdj4q3p52bs05u31qd8vq4gb.apps.googleusercontent.com\"\n  },\n  map: {\n    // Non-secret, so we can commit this\n    apiKey: \"AIzaSyCwcnq2MMCPKEY3hQigIBJn70buQH9py3E\", // \"AIzaSyC5l2tTNWl1b3vliRAbpWD_r3jZXrV85kA\",\n    getSrcUrl: function() {\n      return (\n        \"https://maps.googleapis.com/maps/api/js?key=\" +\n        this.apiKey +\n        \"&callback=initMap\"\n      );\n    },\n    defaults: {\n      // Vancouver\n      center: { lat: 49.267941, lng: -123.24736 },\n      zoom: 12\n    }\n  }\n};\n\nexport default config;","import moment from \"moment\";\nimport { chartBuilder } from \"../helpers/builders.js\";\nimport React from \"react\";\nimport Graph from \"../components/Graph.js\";\nimport Map from \"../components/Map.js\";\n\nlet datasets = [\n  {\n    label: \"Temperature\",\n    id: \"Temperature\",\n    handler: function(retval, d) {\n      let retVals = d.entity.properties.data.stringValue.split(\" \");\n      let elem = {};\n      elem.y = parseFloat(retVals[0]);\n      elem.x = moment(d.entity.properties.published_at.stringValue);\n\n      // Check if the last element was greater than 10 minutes ago, we disjoint it then\n      if (\n        retval.length > 0 &&\n        elem.x.unix() - moment(retval[retval.length - 1].x).unix() > 600\n      ) {\n        retval.push({\n          y: NaN,\n          x: elem.x\n        });\n      }\n      retval.push(elem);\n    },\n    parser: function(label, id, data) {\n      return chartBuilder(label, id, data);\n    },\n    element: function(data) {\n      return <Graph data={data || {}} options={this.options} />;\n    },\n    options: {\n      animation: {\n        duration: 500\n      },\n      scales: {\n        xAxes: [\n          {\n            gridLines: {\n              display: false\n            },\n            type: \"time\",\n            distribution: \"linear\", // Distances can vary, based on time\n            scaleLabel: {\n              display: true,\n              labelString: \"Time\"\n            }\n          }\n        ],\n        yAxes: [\n          {\n            id: \"Temperature\",\n            position: \"left\",\n            gridLines: {\n              display: false\n            },\n            scaleLabel: {\n              display: true,\n              labelString: \"Temperature (C)\"\n            }\n          }\n        ]\n      }\n    }\n  },\n  {\n    label: \"Power\",\n    id: \"Power\",\n    handler: function(retval, d) {\n      let elem = {};\n      elem.y = parseFloat(d.entity.properties.data.stringValue);\n      elem.x = moment(d.entity.properties.published_at.stringValue);\n\n      // Check if the last element was greater than 10 minutes ago, we disjoint it then\n      if (\n        retval.length > 0 &&\n        elem.x.unix() - moment(retval[retval.length - 1].x).unix() > 600\n      ) {\n        retval.push({\n          y: NaN,\n          x: elem.x\n        });\n      }\n      retval.push(elem);\n    },\n    parser: function(label, id, data) {\n      return chartBuilder(label, id, data);\n    },\n    element: function(data) {\n      return <Graph data={data || {}} options={this.options} />;\n    },\n    options: {\n      animation: {\n        duration: 500\n      },\n      scales: {\n        xAxes: [\n          {\n            gridLines: {\n              display: false\n            },\n            type: \"time\",\n            distribution: \"linear\", // Distances can vary, based on time\n            scaleLabel: {\n              display: true,\n              labelString: \"Time\"\n            }\n          }\n        ],\n        yAxes: [\n          {\n            id: \"Power\",\n            position: \"left\",\n            gridLines: {\n              display: false\n            },\n            scaleLabel: {\n              display: true,\n              labelString: \"State of Charge (%)\"\n            }\n          }\n        ]\n      }\n    }\n  },\n  {\n    label: \"Location\",\n    id: \"Location\",\n    handler: function(retval, d) {\n      let NMEASeq = d.entity.properties.data.stringValue.split(\",\");\n      let lat =\n        parseInt(parseInt(NMEASeq[3]) / 100) +\n        parseFloat(parseFloat(NMEASeq[3]) % 100) / 60;\n      let lng =\n        parseInt(parseInt(NMEASeq[5]) / 100) +\n        parseFloat(parseFloat(NMEASeq[5]) % 100) / 60;\n      lat = NMEASeq[4] === \"S\" ? -lat : lat;\n      lng = NMEASeq[6] === \"W\" ? -lng : lng;\n      let elem = { lat, lng };\n      retval.push(elem);\n    },\n    parser: function(label, id, data) {\n      return data;\n    },\n    element: function(data) {\n      return <Map data={data || []} />;\n    }\n  }\n];\n\nexport default datasets;\n","import React from \"react\";\n\nexport default class Button extends React.Component {\n  render = () => {\n    return this.props.liveMode || this.props.updating ? (\n      <button\n        className=\"button is-rounded is-info is-small is-loading\"\n        onClick={this.props.getDataHandler}\n        disabled\n      >\n        Update\n      </button>\n    ) : (\n      <button\n        className=\"button is-rounded is-info is-small\"\n        onClick={this.props.getDataHandler}\n      >\n        Update\n      </button>\n    );\n  };\n}\n","import React from \"react\";\nimport moment from \"moment\";\nimport { DatetimePickerTrigger } from \"rc-datetime-picker\";\nimport '../css/datetime.css';\n\nexport default class DayRange extends React.Component {\n  // Render my pickers; all the state is lifted up into\n  // the parent element, thus all the changes are handled\n  // by props; this element does not have state\n  render = () => {\n    const shortcuts = {\n      Today: moment(),\n      Yesterday: moment().subtract(1, \"days\")\n    };\n    return (\n      <div className=\"columns\">\n        <div className=\"column\">\n          <DatetimePickerTrigger\n            className=\"input is-rounded is-small\"\n            shortcuts={shortcuts}\n            moment={this.props.startTime}\n            onChange={this.props.onChangeStart}\n          >\n            <input\n              type=\"text\"\n              value={this.props.startTime.format(\"YYYY-MM-DD HH:mm\")}\n              readOnly\n            />\n          </DatetimePickerTrigger>\n        </div>\n        <div className=\"column\">\n          <DatetimePickerTrigger\n            className=\"input is-rounded is-small\"\n            shortcuts={shortcuts}\n            moment={this.props.endTime}\n            onChange={this.props.onChangeEnd}\n            disabled={this.props.endTime === null ? true : false}\n          >\n            <input\n              type=\"text\"\n              value={\n                this.props.endTime === null\n                  ? \"Current\"\n                  : this.props.endTime.format(\"YYYY-MM-DD HH:mm\")\n              }\n              readOnly\n              disabled={this.props.endTime === null ? true : false}\n            />\n          </DatetimePickerTrigger>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport Toggle from \"react-toggle\";\nimport Button from \"./Button.js\";\nimport moment from \"moment\";\nimport \"../css/toggle.css\";\nimport config from \"../config/config.js\";\nimport { queryBuilder } from \"../helpers/builders.js\";\nimport DayRange from \"./DayRange.js\";\n\nexport default class Container extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startTime: moment(),\n      endTime: moment(),\n      liveMode: false,\n      updating: false,\n      data: {}\n    };\n  }\n\n  // Handler functions for our starttime change, which\n  // our dayrange will receieve as a prop\n  startTimeChangeHandler = time => {\n    this.setState({\n      startTime: time\n    });\n  };\n\n  endTimeChangeHandler = time => {\n    this.setState({\n      endTime: time\n    });\n  };\n\n  // Handle the current boolean for \"live\" plotting\n  liveUpdateHandler = e => {\n    if (e.target.checked) {\n      this.setState({\n        liveMode: true,\n        endTime: null\n      });\n      this.intervalHandler();\n    } else {\n      clearTimeout(this.timeout);\n      this.setState({\n        liveMode: false\n      });\n      this.endTimeChangeHandler(moment());\n    }\n  };\n\n  intervalHandler = async () => {\n    await this.updateMetrics();\n    if (this.state.liveMode) {\n      this.timeout = setTimeout(this.intervalHandler, 2000);\n    }\n  };\n\n  getDataHandler = async (lastCursor, retval, dataset, handler) => {\n    let req = queryBuilder(\n      this.state.liveMode,\n      this.state.startTime,\n      this.state.endTime,\n      dataset\n    );\n\n    if (lastCursor !== null) req.query.startCursor = lastCursor;\n\n    let response = await fetch(\n      config.datastore.getQueryUrl(),\n      config.datastore.generatePayload(this.props.token, JSON.stringify(req))\n    );\n\n    let json = await response.json();\n\n    try {\n      if (\"entityResults\" in json.batch) {\n        json.batch.entityResults.forEach(d => {\n          handler(retval, d);\n        });\n      }\n\n      // There are still results remaining\n      if (json.batch.moreResults === \"NOT_FINISHED\") {\n        return await this.getDataHandler(\n          json.batch.endCursor,\n          retval,\n          dataset,\n          handler\n        );\n      }\n    } catch (error) {\n      console.log(error);\n    }\n    return retval;\n  };\n\n  getData = async () => {\n    let newData = {};\n\n    for (let dataset of config.datastore.datasets) {\n      let data = await this.getDataHandler(\n        null,\n        [],\n        dataset.id,\n        dataset.handler\n      );\n      newData[dataset.id] = dataset.parser(dataset.label, dataset.id, data);\n    }\n\n    return newData;\n  };\n\n  updateMetrics = async () => {\n    this.setState({\n      updating: true\n    });\n\n    let newData = await this.getData();\n\n    this.setState({\n      updating: false,\n      data: newData\n    });\n  };\n\n  render = () => {\n    return (\n      <div>\n        <div className=\"container notification\">\n          <div className=\"columns\">\n            <div className=\"column is-narrow\">\n              <DayRange\n                startTime={this.state.startTime}\n                endTime={this.state.endTime}\n                onChangeStart={this.startTimeChangeHandler}\n                onChangeEnd={this.endTimeChangeHandler}\n              />\n            </div>\n            <div className=\"column\">\n              <div className=\"columns is-mobile\">\n                <div className=\"toggle column is-narrow\">\n                  <Toggle\n                    defaultChecked={this.state.liveMode}\n                    onChange={this.liveUpdateHandler}\n                  />\n                </div>\n                <div className=\"column is-narrow\">\n                  <Button\n                    liveMode={this.state.liveMode}\n                    getDataHandler={this.updateMetrics}\n                    updating={this.state.updating}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        {config.datastore.datasets.map((dataset, index) => {\n          return (\n            <div\n              className=\"container notification has-background-white-bis\"\n              key={index}\n            >\n              {dataset.element(this.state.data[dataset.id])}\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n}\n","import config from \"./config/config.js\";\nimport GoogleLogin from \"react-google-login\";\nimport Container from \"./components/Container.js\";\nimport React from \"react\";\nimport \"./css/index.css\";\nimport \"bulma/css/bulma.css\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      infoOn: true,\n      loggedOn: false,\n      token: undefined\n    };\n  }\n\n  oauthSuccess = response => {\n    this.setState({\n      loggedOn: true,\n      token: response.accessToken\n    });\n  };\n\n  oauthFailure = response => {\n    console.log(response, \"Oauth Failed.\");\n  };\n\n  infoHide = () => {\n    this.setState({\n      infoOn: false\n    });\n  };\n\n  render = () => {\n    const headerInfo = (\n      <div className=\"container\">\n        <div className=\"notification is-info\">\n          Welcome! If it's your first time here, the toggle sets whether the\n          data is updated live. Otherwise, you can grab specific data by\n          selecting your time range, then pressing \"Update\". You may encounter\n          errors if you're not authorized to access the datastore. You can close\n          this message on the top right.\n          <button onClick={this.infoHide} className=\"delete\"></button>\n        </div>\n      </div>\n    );\n\n    const headerLogin = (\n      <div className=\"container notification is-link floater\">\n        To get started, log in to generate an OAuth token.\n      </div>\n    );\n\n    return this.state.loggedOn ? (\n      <div>\n        {this.state.infoOn ? headerInfo : undefined}\n        <Container token={this.state.token} />\n      </div>\n    ) : (\n      <div>\n        {headerLogin}\n        <div className=\"login\">\n          <GoogleLogin\n            clientId={config.oauth.clientId}\n            buttonText=\"Login\"\n            onSuccess={this.oauthSuccess}\n            onFailure={this.oauthFailure}\n          />\n        </div>\n      </div>\n    );\n  };\n}\n","import App from \"./App.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}