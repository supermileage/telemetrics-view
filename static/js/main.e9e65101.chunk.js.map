{"version":3,"sources":["index.js"],"names":["data","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","GraphContainer","props","_this","Object","C_Users_lesli_Desktop_react_exploration_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","C_Users_lesli_Desktop_react_exploration_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","C_Users_lesli_Desktop_react_exploration_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","handleChangeStart","time","setState","startTime","handleChangeEnd","endTime","handleCurrent","e","console","log","target","checked","current","interval","setInterval","getData","clearInterval","Date","fetch","method","headers","Authorization","token","Accept","Content-Type","body","JSON","stringify","state","query","filter","propertyFilter","op","property","name","value","stringValue","toISOString","kind","projection","compositeFilter","filters","then","val","json","x","y","batch","entityResults","forEach","d","push","parseInt","entity","properties","oldData","graph","newData","C_Users_lesli_Desktop_react_exploration_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","responseGoogle","response","loggedIn","accessToken","responseFail","buttonInit","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","className","onClick","animations","DayRange","startVal","endVal","onChangeStart","onChangeEnd","react_toggle__WEBPACK_IMPORTED_MODULE_10___default","defaultChecked","onChange","Graph","react_google_login__WEBPACK_IMPORTED_MODULE_11___default","clientId","buttonText","onSuccess","onFailure","React","Component","_this2","render","react_chartjs_2__WEBPACK_IMPORTED_MODULE_8__","options","animation","duration","id","react_datepicker__WEBPACK_IMPORTED_MODULE_9__","selected","selectsStart","showTimeSelect","timeIntervals","startDate","endDate","dateFormat","placeholderText","selectsEnd","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.e9e65101.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Line} from 'react-chartjs-2';\r\nimport DatePicker from 'react-datepicker';\r\nimport Toggle from 'react-toggle';\r\nimport GoogleLogin from 'react-google-login';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport \"./toggle.css\";\r\nimport './index.css';\r\n\r\n\r\nconst data = {\r\n  labels: [], // Labels to update\r\n  datasets: [\r\n    {\r\n      label: 'Datapoints',\r\n      fill: true,\r\n      lineTension: 0.1,\r\n      backgroundColor: 'rgba(75,192,192,0.4)',\r\n      borderColor: 'rgba(75,192,192,1)',\r\n      borderCapStyle: 'butt',\r\n      borderDash: [],\r\n      borderDashOffset: 0.0,\r\n      borderJoinStyle: 'miter',\r\n      pointBorderColor: 'rgba(75,192,192,1)',\r\n      pointBackgroundColor: '#fff',\r\n      pointBorderWidth: 1,\r\n      pointHoverRadius: 5,\r\n      pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n      pointHoverBorderWidth: 2,\r\n      pointRadius: 1,\r\n      pointHitRadius: 10,\r\n      data: [] // Data to update\r\n    }\r\n  ]\r\n};\r\n\r\n// Our graph container to hold all our objects, and also\r\n// to store state of our objects\r\nclass GraphContainer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      startTime: new Date(),\r\n      endTime: new Date(),\r\n      current: false,\r\n      loggedIn: false,\r\n      graph: data,\r\n      animations: true\r\n    }\r\n  }\r\n\r\n  // Handle the start time change\r\n  handleChangeStart = (time) => {\r\n    this.setState({\r\n      startTime: time\r\n    })\r\n  }\r\n\r\n  // Handle the end time change\r\n  handleChangeEnd = (time) => {\r\n    this.setState({\r\n      endTime: time\r\n    })\r\n  }\r\n\r\n  // Handle the current boolean for \"live\" plotting\r\n  handleCurrent = (e) => {\r\n    console.log(e);\r\n    let current = e.target.checked;\r\n    if (current) {\r\n      this.setState({\r\n        current: true,\r\n        endTime: null\r\n      })\r\n      this.interval = setInterval(() => this.getData(), 1500);\r\n    } else {\r\n      this.setState({\r\n        current: false\r\n      })\r\n      clearInterval(this.interval);\r\n      this.handleChangeEnd(new Date());\r\n    }\r\n  }\r\n\r\n  // POST using OAuth creds to retrieve datastore based on time\r\n  getData = () => {\r\n    fetch('https://datastore.googleapis.com/v1/projects/ubc-supermileage-telemetry-v2:runQuery?prettyPrint=true&alt=json', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization' : 'Bearer ' + this.token,\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify((this.state.current) ? {\r\n        query: {\r\n          filter: {\r\n            propertyFilter: {\r\n              op: \"GREATER_THAN_OR_EQUAL\",\r\n              property: {\r\n                name: \"published_at\"\r\n              },\r\n              value: {\r\n                stringValue: this.state.startTime.toISOString()\r\n              }\r\n            }\r\n          },\r\n          kind: [\r\n            {\r\n              name: \"ParticleEvent\"\r\n            }\r\n          ],\r\n          projection: [\r\n            {\r\n              property: {\r\n                name: \"data\"\r\n              }\r\n            },\r\n            {\r\n              property: {\r\n                name: \"published_at\"\r\n              }\r\n            }\r\n          ]\r\n        }\r\n        } : {\r\n          query: {\r\n            filter: {\r\n              compositeFilter: {\r\n                filters: [\r\n                  {\r\n                    propertyFilter: {\r\n                      op: \"GREATER_THAN_OR_EQUAL\",\r\n                      property: {\r\n                        name: \"published_at\"\r\n                      },\r\n                      value: {\r\n                        stringValue: this.state.startTime.toISOString()\r\n                      }\r\n                    }\r\n                  },\r\n                  {\r\n                    propertyFilter: {\r\n                      op: \"LESS_THAN_OR_EQUAL\",\r\n                      property: {\r\n                        name: \"published_at\"\r\n                      },\r\n                      value: {\r\n                        stringValue: this.state.endTime.toISOString()\r\n                      }\r\n                    }\r\n                  }\r\n                ],\r\n                op: \"AND\"\r\n              }\r\n            }\r\n            ,\r\n            kind: [\r\n              {\r\n                name: \"ParticleEvent\"\r\n              }\r\n            ],\r\n            projection: [\r\n              {\r\n                property: {\r\n                  name: \"data\"\r\n                }\r\n              },\r\n              {\r\n                property: {\r\n                  name: \"published_at\"\r\n                }\r\n              }\r\n            ]\r\n          }\r\n        })\r\n  }).then(val => val.json().then(e => {\r\n    // TODO continue to fetch results until \"NO_MORE_RESULTS\"\r\n    // TODO save cursor position and clear it on live update toggle\r\n    // this is better for our upates \r\n    // if (e.batch.entityResults.moreResults == \"NOT_FINISHED\")\r\n    let x = [];\r\n    let y = [];\r\n    let val = 0;\r\n    if ('entityResults' in e.batch) {\r\n      e.batch.entityResults.forEach(d => {\r\n        x.push(parseInt(d.entity.properties.data.stringValue));\r\n        y.push(val);\r\n        val++;\r\n      });\r\n      let oldData = this.state.graph.datasets[0];\r\n      let newData = {\r\n        ...oldData,\r\n      };\r\n      newData.data = x;\r\n      this.setState({\r\n        graph: {\r\n          labels: y,\r\n          datasets: [newData]\r\n        }\r\n      });\r\n    }\r\n    console.log(\"Results:\");\r\n    console.log(x);\r\n    console.log(y);\r\n    console.log(e.batch.entityResults);\r\n    console.log(e);\r\n  }));\r\n  }\r\n\r\n  // OAuth authorized, do stuff\r\n  responseGoogle = (response) => {\r\n    this.setState({\r\n      loggedIn: true\r\n    });\r\n    console.log(response);\r\n    this.token = response.accessToken;\r\n  }\r\n\r\n  // OAuth failed, don't do stuff\r\n  responseFail = (response) => {\r\n    console.log(response);\r\n    console.log(\"Failed\");\r\n  }\r\n\r\n  buttonInit = () => {\r\n      return (<span className=\"updateButton\">\r\n        <button onClick={this.getData}>Update</button>\r\n      </span>);\r\n  }\r\n\r\n  // Render element based on logged in state\r\n  render() {\r\n    if (!this.state.loggedIn) {\r\n      return (<div className=\"login\">\r\n        <GoogleLogin\r\n          clientId = \"617338661646-v92ol8vhd4nl44vpntkv4jpjbq5hahmo.apps.googleusercontent.com\"\r\n          buttonText = \"Login\"\r\n          onSuccess = {this.responseGoogle}\r\n          onFailure = {this.responseFail} \r\n        /></div>);\r\n    } else {\r\n      return (<div><div className=\"header\">\r\n        <DayRange \r\n        startVal = {this.state.startTime}\r\n        endVal = {this.state.endTime}\r\n        onChangeStart = {this.handleChangeStart}\r\n        onChangeEnd = {this.handleChangeEnd}\r\n      />\r\n        <label className=\"toggle\">\r\n          <Toggle \r\n            defaultChecked={this.state.current}\r\n            onChange={this.handleCurrent}\r\n          />\r\n        </label>\r\n      {\r\n        (this.state.current) ? \r\n        \"\" : this.buttonInit()\r\n      }\r\n\r\n      </div>\r\n      <Graph\r\n        data = {this.state.graph}\r\n        animations = {this.state.animations}\r\n      /></div>);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Component that holds our graph object. \r\n */\r\nclass Graph extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.val = 1;\r\n  }\r\n  \r\n  render = () => {\r\n    return (<div>\r\n      <Line \r\n        data = {this.props.data}\r\n        options={{\r\n          animation: (this.props.animations) ? {\r\n            duration : 500,\r\n          } : false\r\n        }}\r\n      />\r\n    </div>);\r\n  }\r\n}\r\n\r\n\r\nclass DayRange extends React.Component {\r\n  // Render my pickers; all the state is lifted up into \r\n  // the parent element, thus all the changes are handled\r\n  // by props; this element does not have state\r\n  render() {\r\n    return (<div id=\"pickers\">{\" Start \"} <DatePicker\r\n        selected={this.props.startVal}\r\n        selectsStart\r\n        showTimeSelect\r\n        timeIntervals={2}\r\n        startDate={this.props.startVal}\r\n        endDate={this.props.endVal}\r\n        onChange={this.props.onChangeStart}\r\n        dateFormat=\"MMMM d h:mm:ss aa\"\r\n        />\r\n        {\" End \"} \r\n        <DatePicker \r\n        selected={this.props.endVal}\r\n        placeholderText=\"Current\"\r\n        selectsEnd\r\n        showTimeSelect\r\n        timeIntervals={2}\r\n        startDate={this.props.startVal}\r\n        endDate={this.props.endVal}\r\n        onChange={this.props.onChangeEnd}\r\n        dateFormat=\"MMMM d h:mm:ss aa\"\r\n        >\r\n        </DatePicker></div>);\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <GraphContainer />,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}